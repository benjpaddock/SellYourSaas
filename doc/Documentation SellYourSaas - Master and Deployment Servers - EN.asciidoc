= Sell-Your-Saas installation and operation document
This document describes the technical and functional implementation of Sell-Your-Saas - automated deployment and sales system in SaaS of a WAMP application (like Dolibarr ERP CRM, GLPI, ...) - Laurent Destailleur - www.sellyoursaas.org
:source-highlighter: rouge
:companyname: Teclib
:corpname: Teclib
:orgname: Teclib
:creator: Laurent Destailleur
:title: Document installation and operation of SellYourSaas
:subject: This document describes the technical and functional implementation of SellYourSaas (automated deployment and sale system in SaaS of a WAMP application (like Dolibarr ERP CRM, GLPI, ...).
:keywords: sellyoursaas, saas, dolibarr, wamp, glpi
:imagesdir: ./img
:city: Bordeaux
:toc: manual
:toclevels: 3
:toc-title: Table of contents
:toc-placement: preamble
:revnumber: v1.0
:revdate: 2019-01-30
:revremark: First version
:revnumber: v1.1
:revdate: 2020-02-12
:revremark: Many improvements

<<<<

== Introduction ==

Sell-Your-Saas is an Open Source project, born out of the need to provide, in real time, Web application instances (like Dolibarr ERP CRM) to users, for immediate use, with the following requirements:

* Able to manage a very high number of instances and users.
* Very low costs (must be at least 10x lower than Cloud solutions by containers).
* Real-time deployment.
* Offer full and private access to the proposed application, including administration, with full access without restricting functionality or configuration.
* Offer an open SaaS, with SSH, SFTP access and direct database possible to users.
* Multi-language.

Following the deployment of v1 and at the request of users to perpetuate their instance via a subscription, the platform evolved to add other objectives:

* Take into account the subscription to the application offered in the form of paid subscriptions.
* Dedicated customer area for managing these invoices, accounts and support.
* 100% automated system (from the arrival of the prospect to the termination of his subscription through the delivery of the service, backups, supervision and supply of accounting: no human intervention).
* Flexibility in the subscription mode (frequency, prices, additional service, options, ...)
* Compatible (or at least adaptable) for any web application.
* Management of a reseller network.
* Available in OpenSource.

Funded by the Open Source companies https://www.nltechno.com [NLTechno] and https://www.teclib.com [TecLib], SellYourSaas v2 has achieved these objectives and is now in production for several companies offering Saas services (https://www.dolicloud.com[DoliCloud], https://www.novafirstcloud.com[NovaFirstCloud], https://www.glpi-network.cloud[GLPI-Network], https://www.doliondemand.fr[DoliOnDemand],...). Here is a summary of its capabilities:

* Deployment of any WAMP application. Management of multiple solutions / different applications at the same time.
* Free distribution of proceedings without request for confidential information or bank cards.
* Distribution of paid instances with different pricing levels.
* Ready-to-use showcase website (optional) to sell your application.
* Dedicated customer area (invoicing, ticket, customer account).
* Pre-wired for supervision via DataDog.
* Pre-wired for performance analysis, conversion rate via Google Analytics.
* Payment by bank card via Stripe, SCA (Strong Customer Authentication) compliant.
* Payment by SEPA direct debit (but no direct interface to submit SEPA files to the bank).
* Anti-abuse systems for applications.
* Instance subscription quota systems.
* Tools facilitating maintenance, customer support, application updates.
* Management of a reseller network. Dedicated reseller area (invoicing, customer account).
* Infrastructure cost per instance <30 cents (Cost observed on the DoliCloud sales department providing Dolibarr ERP CRM).
* ...
     

The project has been available as a community project since 2020 on GitHub: https://github.com/eldy/sellyoursaas

It is composed:

    * From an extension module to the excellent Open Source Dolibarr ERP CRM (https://www.dolibarr.org).
    * Various system tools.
    * Installation and system configuration documentation (this documentation).


This document presents the steps for implementing your own SaaS business platform.

<<<<

== Choice and acquisition of a domain name

The entire service will run on a domain name. In the rest of the document, we will use the value *mydomain.com*
You need to acquire this domain name from a registrar.

== Installation of the machine and OS

The first step is to make one (or more) server available. If we are going on several servers, one will be *Master* server (management and invoicing) and the others will be * Deployment servers * (customer instances). The *Master* server can also be *Deployment server*, it is possible to start with a single server.

=== Choice of machine and OS

* Obtain a server with SSH access that can pass root (We will use Ubuntu LTS minimum *16.04* or *18.04*) for the *Master server*.
* Obtain one or n servers with SSH access that can pass root (We will use Ubuntu LTS minimum 16.04 or 18.04) for the *Deployment server(s)*. Note: This point can be ignored if you decide that the Deployment server will be the same server as the Master server (not recommended in production).

_Example with Amazon Standard Medium: _

Server *m1.medium* hosted in EU @ $ 0.18 per hour plus $ 10 for storage and bandwidth then switch to *m1.large* @ $ 0.18 per hour

_Example with OVH Public Cloud: _
 
For the master server: VPS or B2-15 or more
For the deployment server (s), for 500 instances: B2-15 or + (i.e. 2 core server minimum - 8 GB memory minimum - Cost in 2020: 22 euros / month). Double the specifications if you are targeting 1,000 client instances per server.




[[adding_disk]]
=== Adding the data disk (home of user instances and home of backups)

We will add, on the *Deployment server*, an independent disk for user instances and backups. It can be a disc for the 2 or 2 different discs.

On *Deployment server* :

With OVH Public Cloud:

* Create the data disk. For the deployment server, take 250MB per instance.
* Associate the disk with the server (each additional disk is added in / dev / vdb, / dev / vdc, / dev / vdd, ...).
Note, the disk becomes visible with *fdisk -l* and *lsblk*
* If it is a disk never partitioned, add the partition on the disk (Linux type) and format it by doing:

[source, bash]
---------------
fdisk -l
fdisk / dev / vdx
option n then p (then choose the partition number, first and last sector) then w

fdisk -l

fsck -N / dev / vdxY
mkfs.ext4 / dev / vdxY
---------------

Whether the disk has just been formatted or whether it is an added disk already formatted, the rest of the procedure is identical:

* Recover the value of the UUID at the end of the formatting which is displayed, otherwise, recover it with the command *blkid*

* Declare the assembly for an automatic assembly at each reboot by adding a line in */etc/fstab*

[source, bash]
---------------
UUID = 94817f83-a2ad-46c4-81e0-06e6dd0e95f1 / mnt / diskX ext4 defaults 0 0
or
UUID = 94817f83-a2ad-46c4-81e0-06e6dd0e95f1 / mnt / diskX ext4 [noatime,] nofail 0 0 (does not block the server from starting)
---------------

* Mount disk

[source, bash]
---------------
mkdir /mnt/diskhome
mkdir /mnt/diskbackup
mount /dev/vdxY /mnt/diskhome
mount /dev/vdxZ /mnt/diskbackup

blkid
---------------

* Optimize the filesystem by removing the update of the "atime" read access

To see options for optimizing filesystems:

[source, bash]
---------------
tune2fs -l / dev / vdxY | grep features
---------------
return

Filesystem features: has_journal ext_attr resize_inode dir_index filetype needs_recovery extent flex_bg sparse_super large_file huge_file uninit_bg dir_nlink extra_isize


To add -noatime to the filesystem in the */etc/fstab* file:

[source, bash]
---------------
UUID = 94817f83-a2ad-46c4-81e0-06e6dd0e95f1 /mnt/diskX ext4 noatime,nofail 0 0
---------------

To take the change into account:

[source, bash]
---------------
mount -oremount / dev / diskX /
---------------

To check:

[source, bash]
---------------
cat / proc / mounts | grep diskX
---------------

Rem: If you need to recover data from another disk, use:

[source, bash]
---------------
rsync --info = progress2 -to source servers: / mnt / diskSource / mnt / diskTarget

Example:
rsync --info = progress2 --exclude 'dbn *' -au -e 'ssh'. loginuser@myserverdest.mydomain.com: / var / lib / mysql
chown -R mysql.mysql / var / lib / mysql
mysqlcheck --all-databases
---------------



=== SSH and sudo

=== Unix admin account

Create the user account *admin*. It will be used to install and administer the system when root is not required.

[source, bash]
---------------
groupadd admin
useradd -m -g admin admin
usermod -a -G adm admin
mkdir /home/admin/logs
chown root.adm /home/admin/logs
chmod 770 /home/admin/logs
---------------

Check that the id of this user *admin* is greater than or equal to 1000.
 

Create a user account for yourself (or other administrators), for example: *myunixlogin*. It will be used to log in.

[source, bash]
---------------
adduser myunixlogin
---------------


==== ssh setup

Fix permission on */etc/ssh/sshd_config so only root has read and write access:

[source,conf]
---------------
chmod go-rw /etc/ssh/sshd_config
---------------

Create a file */etc/ssh/sshd_config.d/sellyoursaas* to change login permissions with the following content:

[source, conf]
---------------
#Privilege Separation is turned on for security
UsePrivilegeSeparation yes
PermitRootLogin no
# Permissions on files must be correct to allow login
StrictModes yes

# Define list of allowed method to authenticate
ChallengeResponseAuthentication yes
PasswordAuthentication yes
PubkeyAuthentication yes

PermitEmptyPasswords no

AllowUsers myunixlogin admin osu *
DenyUsers guest
---------------

Please note: replace myunixlogin with the correct value before taking changes into account with:

[source, conf]
---------------
/etc/init.d/ssh reload
---------------


Add the following line in the */etc/sudoers* file to reposition the HOME according to the user after a sudo -s:

[source, conf]
---------------
Defaults set_home
---------------

Create a file *myunixlogin* to put in the directory */etc/sudoers.d* with the owner *root* and the permissions *r-r-----* and the content

[source, conf]
---------------
myunixlogin ALL = (ALL) NOPASSWD: ALL
---------------



Add your public key to your unix account.

[source, bash]
---------------
ssh-copy-id myunixlogin@x.y.z.a
---------------


Define or redefine the password for *root*, *admin*, and *myunixlogin* with a secure password.

Launch ssh-keygen on each of these 3 accounts


==== Default shell

Modify the default shell to use bash (instead of dh sh or dash)

[source, bash]
---------------
ln -fs /bin/bash /usr/bin/sh
---------------


=== Deletion of information files at login

In order not to give information to users doing SSH, on the deployment servers:

[source, bash]
---------------
rm /etc/update-motd.d/10-help-text /etc/update-motd.d/20-runabove /etc/update-motd.d/50-landscape-sysinfo /etc/update-motd.d/ 50-landscape-sysinfo
rm /etc/update-motd.d/9*-update*-available /etc/update-motd.d/92-unattended-upgrades
---------------


=== Modification of /etc/skel

Edit the contents of */etc/skel* on the deployment servers in order to fill in the *.ssh/authorized_keys* with
* the ssh public key of the user (s) *myunixlogin*
* the ssh public key of the user *admin* of the master server

[source, bash]
---------------
sudo mkdir /etc/skel/.ssh
sudo touch /etc/skel/.ssh/authorized_keys
sudo chmod -R go-rwx /etc/skel/.ssh
sudo vi /etc/skel/.ssh/authorized_keys
---------------

Thus any new linux account created (those of customer instances) will be accessible by the administrator (s).

    

=== Add alias

Add at the end of */etc/bash.bashrc*:

[source, bash]
---------------
alias psld = 'ps -fax -eo user: 12, pid, ppid, pcpu, pmem, vsz: 12, size: 12, tty, start_time: 6, utime, time, cmd'
---------------


=== Max size increase UID

On the deployment servers, modify */etc/login.defs* to put the

[source, conf]
---------------
UID_MIN 1000
UID_MAX 500000

GID_MIN 1000
GID_MAX 500000
---------------

Modify the file */etc/apache2/mods-enabled/mpm_itk.conf* (if it exists) or */etc/apache2/conf-enabled/security.conf* (otherwise)

[source, conf]
---------------
LimitUIDRange 1,500,000
LimitGIDRange 1,500,000
---------------


=== Hostname and IP configuration

Add an entry from the new server to the DNS provided by the domain provider.

Go to the OVH IP management interface, to add the reverse on the server IP.

Go to the management interface of OVH servers, to modify their short name. This will modify the */etc/hostname* file automatically (if not manually modify) with the short name. The file will then have as sole content:

[source, bash]
---------------
Server name
---------------


Connect and modify the file */etc/hosts* with the entry of the new server

[source, bash]
---------------
ipduserveurprincipale nomdserveur.mysaasdomainname.com
---------------


=== Added support for IP v6 (optional)

==== With ifupdown (apt install ifupdown)

- To add a v6 IP dynamically for testing purposes at first:

[source, bash]
---------------
ip addr add 2002: 41d0: 1234: 1000 :: 1234/128 dev eth0
ip -6 route add 2002: 41d0: 1234: 1000 :: 1 dev eth0
ip -6 route add default via 2002: 41d0: 1234: 1000 :: 1 dev eth0
---------------

- For a persistent reboot definition, declare the interface in */etc/network/interfaces* or in a file in */etc/network/interfaces.d* (Ubuntu <17.10)

Example for an IPv6 2002: 41d0: 1234: 1000 :: 1234 with as gateway 2002: 41d0: 1234: 1000 :: 1

[source, conf]
---------------

# To declare a persistent v6 IP (the mask is 128 at OVH in ipv6)
iface eth0 inet6 static
        address 2002: 41d0: 1234: 1000 :: 1234
        netmask 128
        post-up / sbin / ip -6 route add 2002: 41d0: 1234: 1000 :: 1 dev eth0
        post-up / sbin / ip -6 route add default via 2002: 41d0: 1234: 1000 :: 1 dev eth0
        pre-down / sbin / ip -6 route del default via 2002: 41d0: 1234: 1000 :: 1 dev eth0
        pre-down / sbin / ip -6 route del 2002: 41d0: 1234: 1000 :: 1 dev eth0
---------------

Rem: *eth0* can be something else, for example *ens3*.

To take this into account, try this, otherwise, reboot.

[source, bash]
---------------
/etc/init.d/networking restart
---------------

==== With netplan (Ubuntu 18.04 +)

Add a conf file */etc/netplan/51-ipv6-ovh.yaml*.
Note: OVH provides a /128 for ipv6 but netplan wants /64
 
Example for an IPv6 2002: 41d0: 1234: 1000 :: 1234 with as gateway 2002: 41d0: 1234: 1000 :: 1

[source, conf]
---------------
network:
	version: 2
	ethernets:
		eth0:
			match:
				name: eth0
			addresses:
				- "2002:41d0:1234:1000::1234/64"
			gateway6: "2002:41d0:1234:1000::1"
---------------
Note: Use 4 spaces for tabulation.
 
[source, bash]
---------------
netplan try
netplan apply
---------------

Rem: *eth0* can be something else, for example *ens3*.


=== Add virtual IP (optional)

- Add the virtual IP via the OVH manager.

- Add and remove the virtual network interface on the server dynamically (for test).

Addition:

[source, bash]
---------------
ifconfig eth0: 0 a.b.c.d
---------------

Deletion:

[source, bash]
---------------
ifconfig eth0: 0 down
---------------

- For a persistent reboot definition, declare the interface in */etc/network/interfaces* or in a file in */etc/network/interfaces.d* (Ubuntu <17.10)

Example for 2 virtual IPs:

[source, conf]
---------------
auto eth0: 0
iface eth0: 0 inet static
            address a.b.c.d
            netmask 255.255.255.255
            broadcast a.b.c.d

# To declare a persistent virtual IP
auto eth0: 1
iface eth0: 1 inet static
            address e.f.g.h
            netmask 255.255.255.255
            broadcast e.f.g.h
---------------

Rem: *eth0* can be something else, for example *ens3*.

To take this into account, try this, otherwise, reboot.

[source, bash]
---------------
/etc/init.d/networking restart
---------------

- Associate the virtual IP with the server from the OVH manager.


=== Addition of a swap (optional)

Check if swap exists:

[source, bash]
---------------
swapon --summary
---------------

Add a swap on */swap/swap.img* if the disk is not SSD, otherwise on the non SSD disk */mnt/sdX/swap/swap.img*. If all the disks are SSD, do not swap.

https://www.digitalocean.com/community/tutorials/how-to-configure-virtual-memory-swap-file-on-a-vps#4


=== Creation of working directories

On the *Master* server and the *Deployment* servers, create the directories to store backups and archives.

Create directories required to store data and backups:

[source, bash]
---------------
mkdir /home/jail;

mkdir /mnt/diskhome/home
ln -fs /mnt/diskhome/home /home/jail/home

mkdir /mnt/diskbackup/backup; mkdir /mnt/diskbackup/archives-test; mkdir /mnt/diskbackup/archives-paid
chown admin.root /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid
ln -fs /mnt/diskbackup/backup /home/jail/backup 
ln -fs /mnt/diskbackup/archives-test /home/jail/archives-test 
ln -fs /mnt/diskbackup/archives-paid /home/jail/archives-paid
---------------


=== Installing the nfs share

NFS sharing will allow the *Deployment* servers to recover the application images to be installed which are centralized on the
*Master* server.

==== On the Master server

Install the NFS server and share on */home/admin/wwwroot/dolibarr_documents/sellyoursaas*

[source, bash]
---------------
sudo apt install nfs-kernel-server
vi /etc/exports
---------------

[source, bash]
---------------
# /etc/exports: the access control list for filesystems which may be exported
#               to NFS clients.  See exports(5).
#
# Example for NFSv2 and NFSv3:
# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)
#
# Example for NFSv4:
# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)
# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)
#
/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.server1(ro,no_root_squash,sync,no_subtree_check)
...
/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.serverN(ro,no_root_squash,sync,no_subtree_check)
---------------

[source, bash]
---------------
exportfs -v -a (to validate new entries to add)
exportfs -v -r (to validate new entries to remove)
exportfs
systemctl enable nfs-kernel-server
systemctl restart nfs-kernel-server
systemctl status nfs-kernel-server
exportfs
---------------

==== On the Deployment Servers

Remember to open the firewall access between the NFS client (* Deployment server *) and the NFS server (* Master server *).

Install the NFS client and install it manually. Editing is performed by default in NFSv4.

[source, bash]
---------------
sudo apt-get install nfs-common
sudo mount -t nfs i.p.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas
sudo umount /home/admin/wwwroot/dolibarr_documents/sellyoursaas
---------------

Add the line to the */etc/fstab* file to have automatic reboot mounting

[source, bash]
---------------
i.p.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas  nfs  defaults 0 0
---------------


=== Creation of the ssh key of the admin account

==== On the master and deployment server

Generate a public and private ssh key for the *admin* account.

[source, bash]
---------------
ssh-keygen
---------------

==== On deployment servers

On the deployment servers, copy the public and private key of the master's ssh *admin* account to /home/admin/.ssh/id_rsa_sellyoursaas ... (This key is the one common for maintenance to access user accounts). Put the right rights.

[source, bash]
---------------
chmod u + rw /home/admin/.ssh/id_rsa_sellyoursaas*
chmod go-rw /home/admin/.ssh/id_rsa_sellyoursaas*
chmod a + r /home/admin/.ssh/id_rsa_sellyoursaas.pub
---------------


Complete the file */home/admin/.ssh/config* to indicate to use this public key when accessing to itself or github instead of *id_rsa* by default.

[source, bash]
---------------
Host ipserveurdeploiment
    IdentityFile /home/admin/.ssh/id_rsa_sellyoursaas
Host github.com
    IdentityFile /home/admin/.ssh/id_rsa_sellyoursaas    
---------------

  
<<<<

== Installation of system and application components

=== Installation of packages

* Installation of the following Ubuntu packages

[source, bash]
---------------
sudo apt-get update
sudo apt-get install ntp git zip memcached rrdtool ncdu
sudo apt-get install php mysql-server mysql-client php-cli apache2 php-pear apache2-bin libapache2-mod-php php-fpm php-gd php-json php-ldap php-mysqlnd php-curl php-memcached php- rrd php-imagick php-geoip php-mcrypt php-intl php-zip php-bz2
sudo apt-get install watchdog cpulimit libapache2-mpm-itk apparmor apparmor-profiles apparmor-utils rkhunter chkrootkit 
sudo apt-get install bind9
sudo apt-get install spamc spamassassin clamav clamav-daemon
---------------


=== Disabling automatic update

Uninstall the package *unattended-upgrades* if it was installed.

[source, bash]
---------------
apt remove unattended-upgrades
---------------


=== Apache web server configuration

Enable apache *modules* to work with MPM_PREFORK and MPM_ITK:

[source,bash]
---------------
a2enmod actions alias asis auth_basic auth_digest authn_anon authn_dbd authn_dbm authn_file authz_dbm authz_groupfile authz_host authz_owner authz_user autoindex
a2enmod cache cgid cgi charset_lite dav_fs dav dav_lock dbd deflate dir dump_io env expires ext_filter file_cache filter headers http2 ident include info ldap
a2enmod mem_cache mime mime_magic negotiation php7.0 | php7.2 reqtimeout rewrite setenvif speling ssl status substitute suexec unique_id userdir usertrack vhost_alias
a2enmod mpm_itk mpm_prefork
---------------

Enable apache *configurations* to work with MPM_PREFORK and MPM_ITK:

[source,bash]
---------------
a2enconf charset indexignore localized-error-pages other-vhosts-access-log security
---------------


On the Deployment servers:

* Creation of the directory of the configuration files of the virtual hosts of the instances.

[source, bash]
---------------
cd /etc/apache2
mkdir sellyoursaas-available sellyoursaas-online sellyoursaas-offline
ln -fs /etc/apache2/sellyoursaas-online /etc/apache2/sellyoursaas-enabled
---------------

* On Ubuntu 18.04 and higher, check that the *PrivateTmp* parameter is *false* in the Apache launch configuration. This will make it possible to have a 
directory */tmp* which is not unique and not isolated to each instance, making debugging and analysis operations possible on the problems of sending emails and controlling spam.

[source, bash]
---------------
vi /etc/systemd/system/multi-user.target.wants/apache2.service
systemctl reload apache2
---------------

* Addition of the directive to take into account the directory for the *virtual hosts* of the user instances in the config */etc/apache2/apache2.conf*

[source, conf]
---------------
	# Include virtual host for sellyoursaas instances:
	IncludeOptional sellyoursaas-enabled/*.conf
---------------

* Added directives to define the default error log in */etc/apache2/conf-enabled/other-vhosts-access-log.conf*

[source, conf]
---------------
ErrorLogFormat "[%v] [%{u}t] [%-m:%l] [pid %P:tid %T] %7F: %E: [client\ %a] %M% ,\ referer\ %{Referer}i"
ErrorLog ${APACHE_LOG_DIR}/other_vhosts_error.log
---------------



On the Master server:

* Create a virtual host *admin.mysaasdomainname.com* on the Dolibarr *Master* for the administration of SellyourSaas

[source, bash]
---------------
##########################
# Admin Dolibarr Master
##########################
<VirtualHost *:80>
        #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
        #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
        #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f webmaster@mysaasdomainname.com"
        php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/usr/share/GeoIP:/home/jail/home:/home/admin/backup/dump:/home/admin/tools/
        php_admin_value memory_limit 64M

        ServerName      admin.mysaasdomainname.com
        DocumentRoot /home/admin/wwwroot/dolibarr/htdocs/
        ErrorLog     /home/admin/logs/mycompany_admin_error_log
        CustomLog    /home/admin/logs/mycompany_admin_access_log combined

        UseCanonicalName Off

        # Not sure this can help
        TimeOut 20

        KeepAlive On
        KeepAliveTimeout 5
        MaxKeepAliveRequests 20

        <Directory /home/admin/wwwroot>
        AllowOverride FileInfo Limit
        Options +FollowSymLinks
        Order allow,deny
        Deny from env=bad_bots
        Allow from all
        Require all granted
        </Directory>

        # Add alias git on sellyoursaas git dir
        Alias "/git" "/home/admin/wwwroot/dolibarr_documents/sellyoursaas/git"
        <Directory /home/admin/wwwroot>
        AllowOverride FileInfo Limit
        Options +Indexes
        Require ip 1.2.3.4
        </Directory>

        ExpiresActive On
        ExpiresByType image/x-icon A2592000
        ExpiresByType image/gif A2592000
        ExpiresByType image/png A2592000
        ExpiresByType image/jpeg A2592000
        ExpiresByType text/css A2592000
        ExpiresByType text/javascript A2592000
        ExpiresByType application/x-javascript A2592000
        ExpiresByType application/javascript A2592000

RewriteEngine On
RewriteCond %{SERVER_NAME} =admin.mysaasdomainname.com
RewriteCond %{REQUEST_URI} !fileserver\.php
RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>
---------------

You can create another virtual host for the HTTPS on port 443


* Create a virtual host for the client area * myaccount.mysaasdomainname.com *

[source, bash]
---------------
#########################                                                                                               
# MyAccount                                                                                        
#########################                                                                                               
<VirtualHost *:80>
   #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i"
   #php_admin_value mail.force_extra_parameters "-f postmaster@mysaasdomainname.com"
   #php_admin_value sendmail_path "/usr/sbin/sendmail -t -i -f postmaster@mysaasdomainname.com"
   php_admin_value open_basedir /tmp/:/home/admin/wwwroot/:/home/admin/tools/

   UseCanonicalName On
   ServerName   myaccount.mysaasdomainname.com
   ErrorLog     /home/admin/logs/mysaas_myaccount_error_log
   CustomLog    /home/admin/logs/mysaas_myaccount_access_log combined

   DocumentRoot /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/myaccount

   <Directory /home/admin/wwwroot/dolibarr_sellyoursaas/myaccount>
   AllowOverride FileInfo Options
   Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
   Require all granted
   </Directory>

   # To access images
   <Directory /home/admin/wwwroot/dolibarr_documents>
   AllowOverride FileInfo Options
   Options       -Indexes -MultiViews +FollowSymLinks -ExecCGI
   Require all granted
   </Directory>

   AddOutputFilterByType DEFLATE text/html text/plain text/xml
   AddDefaultCharset utf-8

	    ExpiresActive On
	    ExpiresByType image/x-icon A2592000
	    ExpiresByType image/gif A2592000
	    ExpiresByType image/png A2592000
	    ExpiresByType image/jpeg A2592000
	    ExpiresByType text/css A2592000
	    ExpiresByType text/javascript A2592000
	    ExpiresByType application/x-javascript A2592000
	    ExpiresByType application/javascript A2592000

RewriteEngine on
RewriteCond %{SERVER_NAME} =myaccount.mysaasdomainname.com
RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
</VirtualHost>
---------------

You can create another virtual host for the HTTPS on port 443


=== Timeout of server launches

On Ubuntu 18.04+ and with MariaDb migrated from a MySql:

Increase the timeout for launching processes because sometimes mysql / mariadb can take a long time to crash. To do this, modify the file */etc/systemd/system/mariadb.service.d/migrated-from-my.cnf-settings.conf* and put

[source, bash]
---------------
[Service]
TimeoutStartSec = 3600s
TimeoutStopSec = 3600s
---------------

Rem: Instead of putting *3600s*, it is possible to put *infinity*

Then reload the new configuration:

[source, bash]
---------------
systemctl reload service_name.service
---------------


=== Installation of the firewall ===

* Create a firewall launch file (for example in */home/admin/tools/firewall*). Configuring a firewall is not part of the SellYourSaas project. Make sure it starts when the server starts by:

[source, bash]
---------------
ln -fs /home/admin/tools/firewall /etc/init.d/firewallsellyoursaas
systemctl daemon-reload
systemctl enable firewallsellyoursaas
systemctl is-enabled firewallsellyoursaas
systemctl status firewallsellyoursaas
---------------

TODO Graphic with flux and ports


=== Installation of unix watchdog (optional) ===

* Installation and activation of watchdog Linux with configs in */etc/watchdog*

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/repair.ksh /usr/bin/repair
---------------

To consult, no longer launch at startup, launch at startup, stop, launch:

[source, bash]
---------------
systemctl status watchdog
systemctl disable watchdog
systemctl enable watchdog
systemctl stop watchdog
systemctl start watchdog
---------------

When load become very high or when memory is very low, the watchdog will launch the repair script that will track status of server into files */var/log/repair...log* and then reboot the server. Note: This should never happen.


=== Installation of the Apache watchdog ===

Required to compensate an apache bug making apache dying after a too high number of reload.

On the *Deployment servers* :

* Installation and activation of the apache watchdogs provided in */home/admin/wwwroot/dolibarr_sellyoursaas/scripts/* by creating a link by

[source, bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/apache_watchdog_launcher1.sh /etc/init.d/apache_watchdog_launcher1
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/apache_watchdog_launcher2.sh /etc/init.d/apache_watchdog_launcher2
systemctl daemon-reload

systemctl enable apache_watchdog_launcher1
systemctl is-enabled apache_watchdog_launcher1
systemctl status apache_watchdog_launcher1

systemctl enable apache_watchdog_launcher2
systemctl is-enabled apache_watchdog_launcher2
systemctl status apache_watchdog_launcher2
---------------


=== Installation of the instance deployment agent ===

On the *Deployment servers* :

* Agent installation and activation in */home/admin/wwwroot /dolibarr_sellyoursaas/scripts/remote_server_launcher.sh* by creating a link by

[source, bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/remote_server_launcher.sh /etc/init.d/remote_server_launcher
systemctl daemon-reload
systemctl enable remote_server_launcher
systemctl is-enabled remote_server_launcher
systemctl status remote_server_launcher
---------------

Note: The agent is launched on port 8080


Pour utiliser systemd créer un fichier /etc/systemd/system/remote-server-launcher.service :

[source,bash]
---------------
# /etc/systemd/system/remote-server-launcher.service
[Unit]
 Description=Remote Server Launcher
 RequiresMountsFor=/home/admin/wwwroot/dolibarr_documents/sellyoursaas

[Service]
 Type=forking
 ExecStart=/etc/init.d/remote_server_launcher start
 TimeoutSec=0
 StandardOutput=tty
 RemainAfterExit=yes
 Restart=on-failure

[Install]
 WantedBy=multi-user.target
---------------

La directive "RequiresMountsFor" permet d'attendre la disponibilité du répertoire où se trouve le script "remote_server_launcher.sh"

Activation du service :

[source,bash]
---------------
systemctl enable remote-server-launcher.service
systemctl start remote-server-launcher.service
systemctl status remote-server-launcher.service
systemctl stop remote-server-launcher.service
---------------


=== Installation of fail2ban ===

* Installation of fail2ban and activation of the following fail2ban rules:
  *apache-shellshock*, *php-url-fopen*, *webmin-auth*, *pam-generic*, *postfix-sasl*, *mysqld-auth*, *xinetd-fail*
  *apache-badbots*, *apache-noscript*, *apache-overflows*, *apache-nohome*, *apache-botsearch*
  
* As well as the specific rules for sellyoursaas:
  
  *email-dol-blacklist*, *email-dol-perday*, *email-dol-perhour*, *email-dol-perhouradmin*, *web-dol-passforgotten*


To do this, first create a */etc/fail2ban/jail.local* file with this content:

NOTE: The rules available may vary depending on the version of the OS installed.

NOTE: Remember to also modify "mybusinessips" by your ip(s) separated by spaces as well as the parameter *destemail* by the supervision email of your company.


[source, bash]
---------------
# Fail2Ban configuration file.
#
# This file was composed for Debian systems from the original one
# provided now under /usr/share/doc/fail2ban/examples/jail.conf
# for additional examples.
#
# Comments: use '#' for comment lines and ';' for inline comments
#
# To avoid merges during upgrades DO NOT MODIFY THIS FILE
# and rather provide your changes in /etc/fail2ban/jail.local
#

# The DEFAULT allows a global definition of the options. They can be overridden
# in each jail afterwards.

[DEFAULT]
# "ignoreip" can be an IP address, a CIDR mask or a DNS host. Fail2ban will not
# ban a host which matches an address in this list. Several addresses can be
# defined using space separator.
ignoreip = 127.0.0.1/8 mybusinessips

# "bantime" is the number of seconds that a host is banned.
bantime  = 3600

# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 600
maxretry = 3

# "backend" specifies the backend used to get files modification.
# Available options are "pyinotify", "gamin", "polling" and "auto".
# This option can be overridden in each jail as well.
#
# pyinotify: requires pyinotify (a file alteration monitor) to be installed.
#            If pyinotify is not installed, Fail2ban will use auto.
# gamin:     requires Gamin (a file alteration monitor) to be installed.
#            If Gamin is not installed, Fail2ban will use auto.
# polling:   uses a polling algorithm which does not require external libraries.
# auto:      will try to use the following backends, in order:
#            pyinotify, gamin, polling.
backend = auto

# "usedns" specifies if jails should trust hostnames in logs,
#   warn when reverse DNS lookups are performed, or ignore all hostnames in logs
#
# yes:   if a hostname is encountered, a reverse DNS lookup will be performed.
# warn:  if a hostname is encountered, a reverse DNS lookup will be performed,
#        but it will be logged as a warning.
# no:    if a hostname is encountered, will not be used for banning,
#        but it will be logged as info.
usedns = warn

#
# Destination email address used solely for the interpolations in
# jail.{conf,local} configuration files.
destemail = supervision@mydomain.com

#
# Name of the sender for mta actions
sendername = Fail2Ban


#
# ACTIONS
#

# Default banning action (e.g. iptables, iptables-new,
# iptables-multiport, shorewall, etc) It is used to define
# action_* variables. Can be overridden globally or per
# section within jail.local file
banaction = iptables-multiport

# email action. Since 0.8.1 upstream fail2ban uses sendmail
# MTA for the mailing. Change mta configuration parameter to mail
# if you want to revert to conventional 'mail'.
mta = sendmail


[apache-shellshock]

enabled = true


[php-url-fopen]

enabled = true


[pam-generic]

enabled = true


[postfix-sasl]

# Overwrite param port since it is wrong into file jail.conf because it contains 'imap3' instead of 'imap' that does not exists
port    = smtp,465,submission,imap,imaps,pop3,pop3s
enabled = true


[sshd]

enabled = true


[webmin-auth]

enabled = true


[xinetd-fail]

enabled = true


[apache-badbots]
# Ban hosts which agent identifies spammer robots crawling the web
# for email addresses. The mail outputs are buffered.
port     = http,https
logpath  = %(apache_access_log)s
bantime  = 172800
maxretry = 1
enabled  = true


[apache-noscript]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 6
enabled  = true


[apache-overflows]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[apache-nohome]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[apache-botsearch]

port     = http,https
logpath  = %(apache_error_log)s
maxretry = 2
enabled  = true


[mysqld-auth]

port     = 3306
logpath  = /var/log/mysql/error.log
#backend  = %(mysql_backend)s
enabled = true
bantime  = 7200      ; 2 hours
findtime = 3600      ; 1 hour
maxretry = 5


[email-dol-perhour]

; rule against intensive email ko - too high number of recipient (see file etc/fail2ban/filter.d/apache-dolibarr-rulesko)
; A log for this rule wil be reported if nb of recipients is higher than $MAXOK defined into phpsendmail.php file
; Note: For Dolibarr app, you can set MAIL_MAX_NB_OF_RECIPIENTS_IN_SAME_EMAIL to match same value.
enabled = true
port    = http,https
filter  = apache-dolibarr-rulesko
logpath = /var/log/phpsendmail.log
action = %(action_mw)s
bantime  = 7200      ; 2 hours
findtime = 3600      ; 1 hour
maxretry = 5

[email-dol-blacklist]

; rule against email ko - blacklist ip, email or content (see file etc/fail2ban/filter.d/apache-dolibarr-ruleskoblacklist)
enabled = true
port    = http,https
filter  = apache-dolibarr-ruleskoblacklist
logpath = /var/log/phpsendmail.log
action = %(action_mw)s
bantime  = 4320000   ; 50 days
findtime = 86400     ; 1 day
maxretry = 1

[email-dol-perday]

; rule against out of limit emails (max 500 emails per day) (see file etc/fail2ban/filter.d/apache-dolibarr-rulesall)
enabled = true
port    = http,https
filter  = apache-dolibarr-rulesall
logpath = /var/log/phpsendmail.log
action  = %(action_mw)s
bantime  = 86400     ; 1 day
findtime = 86400     ; 1 day
maxretry = 500

[email-dol-perhouradmin]

; rule against out of limit emails (max 10 from admin) (see file etc/fail2ban/filter.d/apache-dolibarr-rulesadmin)
enabled = true
port    = http,https
filter  = apache-dolibarr-rulesadmin
logpath = /var/log/phpsendmail.log
action  = %(action_mw)s
bantime  = 4320000   ; 50 days
findtime = 60        ; 1 minute
maxretry = 10

[web-dol-passforgotten]

; rule against call to passwordforgottenpage (see file etc/fail2ban/filter.d/apache-dolibarr-rulespasswordforgotten)
; disable this rule by setting enable to false on deployment only servers
enabled = true
port    = http,https
filter  = apache-dolibarr-rulespassforgotten
logpath = /home/admin/wwwroot/dolibarr_documents/dolibarr.log
action  = %(action_mw)s
bantime  = 4320000   ; 50 days
findtime = 86400     ; 1 day
maxretry = 10

---------------

Then place the filter files supplied with the project in *etc/fail2ban/filter.d* in the directory of the same name */etc/fail2ban/filter.d*


=== Test spamassassin ===

The process *spamd* must be running. Start it manually if it is not the case the first time.

To test that spamassassin client is working, create a file */tmp/testspam* with content

    Subject: Test spam mail (GTUBE)
    Message-ID: <GTUBE1.1010101@example.net>
    Date: Wed, 23 Jul 2003 23:30:00 +0200
    From: Sender <sender@example.net>
    To: Recipient <recipient@example.net>
    Precedence: junk
    MIME-Version: 1.0
    Content-Type: text/plain; charset=us-ascii
    Content-Transfer-Encoding: 7bit

    This is the GTUBE, the
	    Generic
	    Test for
	    Unsolicited
	    Bulk
	    Email

    If your spam filter supports it, the GTUBE provides a test by which you
    can verify that the filter is installed correctly and is detecting incoming
    spam. You can send yourself a test mail containing the following string of
    characters (in upper case and with no white spaces and line breaks):

    XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X

    You should send this test mail from an account outside of your network.

Then test with:

[source,bash]
---------------
spamc < /tmp/testspam
spamc -c < /tmp/testspam
echo $?
---------------


=== Installation of ClamAV

The process *freshclam* and *clamd* must be running. Start them manually the first time.

To test clamav tool, create a file */tmp/testvirus* with content

[source,bash]
---------------
X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*
---------------

And to test *clamav* command line and daemon:

[source,bash]
---------------
clamscan /tmp/testvirus
clamdscan /tmp/testvirus --fdpass
---------------

Remove the apparmor profile for *usr.sbin.clamd*. It is required to be called from web process (otherwise error on "getattr").

[source,bash]
---------------
cd /etc/apparmor.d/disable
ln -fs /etc/apparmor.d/usr.sbin.clamd
service apparmor reload
service apparmor status
service apache2 stop
service apache2 start
---------------

You should see into the status a line saying that Profile *usr/sbin/clamd* is disabled.
It seems we must also restart apache to have this effective inside apache.


=== Installation of Afick

* Install afick.pl tool from the debian package found on afick web site.

* Comment the lines that exclude suffix we want to keep in */etc/afick.conf*.

* Complete setup */etc/afick.conf* for section *macros* with:

[source,bash]
---------------
# used by cron job (afick_cron)
# define the mail adress to send cron job result
@@define MAILTO supervision@mysaasdomainname.com
# truncate the result sended by mail to the number of lines (avoid too long mails)
@@define LINES 1000
# REPORT = 1 to enable mail reports, =0 to disable report
@@define REPORT 1
# VERBOSE = 1 to have one mail by run, =0 to have a mail only if changes are detected
@@define VERBOSE 1
# define the nice value : from 0 to 19 (priority of the job)
@@define NICE 18
# = 1 to allow cron job, = 0 to suppress cron job
@@define BATCH 1
# if set to 0, keep all archives, else define the number of days to keep
# with the syntaxe nS , n for a number, S for the scale
# (d for day, w for week, m for month, y for year)
# ex : for 5 months : 5m
@@define ARCHIVE_RETENTION 6m
---------------

* Complete setup */etc/afick.conf* by adding at end:

[source,bash]
---------------
############################################
# to allow easier upgrade, my advice is too separate
# the default configuration file (above) from your
# local configuration (below).
# default configuration will be upgraded
# local configuration will be kept
########## put your local config below ####################
!/var/log/mysql
!/var/log/letsencrypt
!/var/log/datadog

!/etc/apache2/sellyoursaas-available
!/etc/apache2/sellyoursaas-online
!/etc/bind/archives
!/etc/bind/
!/etc/group
!/etc/group-
!/etc/gshadow
!/etc/gshadow-
!/etc/passwd
!/etc/passwd-
!/etc/shadow
!/etc/shadow-
!/etc/subgid
!/etc/subgid-
!/etc/subuid
!/etc/subuid-

/home MyRule
/home/admin/logs Logs
/var/log/datadog Logs
!/home/admin/backup
!/home/jail/home
!/home/admin/wwwroot/dolibarr_documents
!/home/admin/wwwroot/dolibarr/.git
!/home/admin/wwwroot/dolibarr_nltechno/.git
!/home/admin/wwwroot/dolibarr_sellyoursaas/.git

!/home/admin/.bash_history
!/home/admin/.viminfo
!/home/admin/.mysql_history
!/home/myunixlogin/.bash_history
!/home/myunixlogin/.viminfo
!/home/myunixlogin/.mysql_history
!/root/.bash_history
!/root/.viminfo
!/root/.mysql_history

exclude_suffix := cache
---------------


Test that execution by crontab works correcly by running under root:

[source,bash]
---------------
/etc/cron.daily/afick_cron
---------------


=== Configuration de cpulimit (optionnel)

* Launch cpulimit at startup to execute:

[source,conf]
---------------
cpulimit launched with script  cpulimit --exe=apache2 --limit=20
---------------

See script *cpulimit_daemon* to put into */etc/init.d*.



=== Setup of /etc/security/limits.conf (optionnel)

* Editer le fichier */etc/security/limits.conf* par exemple pour augmenter le nombre de fichiers max ouvert par processus

[source,conf]
---------------
mysql           soft     nofile           4096
mysql           hard     nofile           32768
---------------

Pour voir les limites:

[source,bash]
---------------
ulimit -a
---------------


=== Configuration de Postfix

Créer un fichier */etc/postfix/generic* pour ajouter la correspondance entre l'email utilisé par les envois de mails système qui ont un from vide
et l'email à utiliser qui est officiellement valide.

[source,bash]
---------------
root@myshortservername.mysaasdomain.com		noreply@mysaasdomain.com
root@myshortservername.locadomain			noreply@mysaasdomain.com
admin@myshortservername.mysaasdomain.com	noreply@mysaasdomain.com
---------------

Compiler le fichier par:

[source,bash]
---------------
postmap /etc/postfix/generic
---------------

Editer le fichier /etc/mailname pour mettre le nom long du serveur *myshortservername.mysaasdomain.com*:
[source,bash]
---------------
vi /etc/mailname
---------------



Compléter le fichier */etc/postfix/main.cf* avec:

[source,bash]
---------------
smtpd_relay_restrictions = permit_mynetworks permit_sasl_authenticated defer_unauth_destination
myhostname = myservername.mysaasdomainname.com
alias_maps = hash:/etc/aliases
alias_database = hash:/etc/aliases
myorigin = /etc/mailname
mydestination = $myhostname, apollon.localdomain, localhost.localdomain, localhost
# mynetworks contains only localhost. Allowed external host are allowed with firewall on port 25 + because we use sasl authentication
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 204800000
recipient_delimiter = +
inet_interfaces = ip.public.du.serveur
inet_protocols = ipv4
smtp_generic_maps = hash:/etc/postfix/generic

# Activer ces lignes pour utiliser SendGrid comme serveur envoi pour les envois d'emails depuis les instances utilisateurs
#smtp_sasl_auth_enable = yes
#smtp_sasl_password_maps = static:apikey:abc1234567890abc12345678901234567890
#smtp_sasl_security_options = noanonymous
#smtp_tls_security_level = encrypt
#header_size_limit = 4096000
#relayhost = [smtp.sendgrid.net]:2525
# Ou mettre relayhost à vide pour utiliser le serveur local commant agent d'envoi des emails.
relayhost =

smtpd_recipient_limit = 100
smtpd_helo_required = yes
smtpd_client_connection_count_limit = 20
#deliver_lock_attempts = 10
#deliver_lock_delay = 10s
message_size_limit = 20480000

#header_checks = regexp:/etc/postfix/header_checks

# Liste des emails virtuelles
#----------------------------
#virtual_alias_maps = hash:/etc/postfix/virtual

# Liste des clients bloques
#-----------------------------
smtpd_client_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access

# Liste des emetteurs bloques
#----------------------------
# Here we declare we want mail from specific email, mail not rejected by rbl, otherwise refused
#smtpd_sender_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access,  check_sender_access hash:/etc/postfix/access_from, reject_non_fqdn_sender, reject_rbl_client cbl.abuseat.org, reject_rbl_client bl.spamcop.net, reject_unknown_sender_domain
smtpd_sender_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access, check_sender_access hash:/etc/postfix/access_from, reject_non_fqdn_sender, reject_unknown_sender_domain

# Liste des recepteurs bloques
#-----------------------------
# Here we declare we want mail to my domain, to specific email with SA filtering, otherwise refuse.
smtpd_recipient_restrictions = permit_sasl_authenticated, permit_mynetworks, check_client_access hash:/etc/postfix/access, check_recipient_access hash:/etc/postfix/access_to, reject_unauth_destination

#debug_peer_list = mysaasdomainname.com, mysaasdomainname.com
#compatibility_level = 2
---------------


!!! IMPORTANT

Pensez à modifier dans */etc/postfix/main.cf*, les entrées :
 
[source,bash]
---------------
inet_interfaces = ip_publique_associe_au_nom_de_la_resolution_du_reverse_dns_du_serveur
inet_protocols = ipv4
---------------


=== Configuration de Postfix pour authentification externe SMTP sécurisée (optionnel)

En cas de besoin d'utiliser postfix depuis un accès externe (et donc authentifié)

[source,bash]
---------------
sudo apt-get install sasl2-bin
vi /etc/default/saslauthd  pour mettre START=yes
---------------

Vérifier que le user postfix se trouve dans le groupe *sasl*. Si non, l'ajouter par:

[source,bash]
---------------
adduser postfix sasl
---------------

Modifier le fichier */etc/postfix/master.cf* pour ajouter un 'n' afin de désactiver le chroot de smtpd

[source,bash]
---------------
smtp      inet  n       -       n       -       -       smtpd
---------------

Ajouter un fichier *smtpd.conf* dans */etc/postfix/sasl*

[source,bash]
---------------
saslauthd_path: /var/run/saslauthd/mux
pwcheck_method: saslauthd
mech_list: plain login
---------------

Pour du SMTPS, créer un certificat:
 
[source,bash]
---------------
cd /etc/postfix
openssl req -nodes -new -x509 -keyout dsfc.key -out dsfc.crt
---------------

Compléter le fichier */etc/postfix/main.cf* avec:

[source,bash]
---------------
# TLS parameters (only if you want TLS as SMTP server)
smtpd_tls_cert_file=/etc/postfix/dfsc.crt
smtpd_tls_key_file=/etc/postfix/dfsc.key
#smtpd_tls_ask_ccert = yes
#smtpd_tls_req_ccert = yes
smtpd_use_tls=yes
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache
#smtpd_tls_auth_only = yes
#smtpd_tls_ccert_verifydepth = 1
smtpd_tls_loglevel = 1
smtpd_tls_security_level = may

#smtpd_sasl_type = dovecot
#smtpd_sasl_path = private/auth-client
#smtpd_sasl_local_domain =
# Allow SMTP AUTH
smtpd_sasl_auth_enable = yes
# Need auth
smtpd_sasl_security_options = noanonymous
broken_sasl_auth_clients = yes
---------------



=== Setup of Mysql or Mariadb

On *Deployment servers*, use a dedicated setup of the database.

==== Setup

Edit the config file */lib/systemd/system/mysql.service* to put into section *[Service]* a value that is a limit number of files that is higher than the default value of *4096* (visible with *sudo systemctl show -p DefaultLimitNOFILE*) of systemd:

[source,bash]
---------------
LimitNOFILE=50000
Restart=on-watchdog
---------------

Take the change into account with command:

[source,bash]
---------------
systemctl daemon-reload
---------------

Edition du fichier de config *mysqld.cnf* dans */etc/mysql/mysql.conf.d* (si mysql) 
ou *50-server.cnf* dans */etc/mysql/mariadb.conf.d* (si mariadb) pour changer :


[source,bash]
---------------
bind-address = 127.0.0.1
---------------

with 

[source,bash]
---------------
bind-address = 0.0.0.0
max_connections      = 500
max_user_connections = 30
wait_timeout         = 7200
table_open_cache     = 10000
table_definition_cache = 8000
sort_buffer_size=2M
read_buffer_size=1M
join_buffer_size=2M
max_heap_table_size=32M
max_allowed_packet=32M
# Mysql: max_execution_time = 300000 (milliseconds) or Mariadb: max_statement_time = 300 (seconds)
#max_execution_time = 300000

innodb_buffer_pool_size=1G
innodb_buffer_pool_instances=8
innodb_file_per_table=1
innodb_log_file_size=256M
innodb_log_buffer_size=32M


[mariadb]
log_warnings = 2
---------------

This may also be "listen = 0.0.0.0" instead of "bind-address = 0.0.0.0".


==== Secure the root account

In order not to allow brutal force cracking, if it is not already the case, put the user *root* of the database in authentication
from the system root account only (using *auth_socket* or *unix_socket*):

For Mysql: The plugin is *auth_socket* and you have to install it manually. More info on: https://dev.mysql.com/doc/refman/5.7/en/socket-pluggable-authentication.html

[source,sql]
---------------
INSTALL PLUGIN auth_socket SONAME 'auth_socket.so';
SELECT PLUGIN_NAME, PLUGIN_STATUS FROM INFORMATION_SCHEMA.PLUGINS;
---------------

For MariaDb: The plugin is *unix_socket* and is set by default on Ubuntu OS.


To switch in mode authentification by password / by unix socket account :

For Mysql:

[source,sql]
---------------
# Identification by password
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '...';
# Identification by unix socket
ALTER USER 'root'@'localhost' IDENTIFIED WITH auth_socket;
---------------

For MariaDb:

[source,sql]
---------------
# Identification by password
update mysql.user set plugin='' where user='root' and host='localhost';
# Identification by unix socket
update mysql.user set plugin='unix_socket' where user='root' and host='localhost';
---------------


Note: The show specific parameters that are not the default values, you can launch:

[source,bash]
---------------
mysqld --print-defaults
---------------


Note: To delete active plugins, empty the mysql * plugins * table. See "Starting mysql without permissions" if this blocks the server from starting if necessary.



[[creer_un_compte_db_sellyoursaas]]
==== Create a user sellyoursaas to administer database of user instances

On the *Master* server and each *Deployment server*, donner l'accès localement au compte *sellyoursaas*:

[source,sql]
---------------
CREATE USER 'sellyoursaas'@'localhost' IDENTIFIED BY '...';
GRANT CREATE USER, GRANT OPTION, RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'sellyoursaas'@'localhost';
GRANT CREATE, CREATE TEMPORARY TABLES, CREATE VIEW, DROP, DELETE, INSERT, SELECT, UPDATE, ALTER, INDEX, REFERENCES, SHOW VIEW ON *.* TO 'sellyoursaas'@'localhost';
FLUSH PRIVILEGES;
---------------

Give permission, on the *Master server*, to the account of each deployment server, on the database *dolibarr*:

[source,sql]
---------------
CREATE USER 'sellyoursaas'@'ip.server.deployment' IDENTIFIED BY '...';   (password is the one into /etc/sellyoursaas.conf of the deployment server)
GRANT CREATE TEMPORARY TABLES, DELETE, INSERT, SELECT, UPDATE ON dolibarr.* TO 'sellyoursaas'@'ip.server.deployment';
FLUSH PRIVILEGES;
---------------

Rem: If the user already exists, to set only the password:

[source,sql]
---------------
ALTER USER 'sellyoursaas'@'localhost' IDENTIFIED BY '...';
or
SET PASSWORD FOR 'sellyoursaas'@'localhost' = PASSWORD('...');
or
update mysql.user SET authentication_string = PASSWORD('...') where user  = 'sellyoursaas' and host = 'localhost';
FLUSH PRIVILEGES;
---------------


Give access rights to the *Master server* and *Deployment servers* for remote administration on all databases from a desktop:

[source,sql]
---------------
CREATE USER 'yourremotelogin'@'ip.poste.admin.distant' IDENTIFIED BY '...';
GRANT CREATE USER,GRANT OPTION,RELOAD ON *.* TO 'yourremotelogin'@'ip.poste.admin.distant';
GRANT CREATE,CREATE TEMPORARY TABLES,CREATE VIEW,DROP,DELETE,INSERT,SELECT,UPDATE,ALTER,INDEX,LOCK TABLES,REFERENCES,SHOW VIEW ON *.* TO 'yourremotelogin'@'ip.poste.admin.distant';
FLUSH PRIVILEGES;
---------------


If you use a supervision agent like *DataDog* to superize the database, create an accunt to access localy to the database (the password is the one defined into */etc/datadog-agent/conf.d/mysql.d/conf.yaml*):

[source,sql]
---------------
CREATE USER 'datadog'@'localhost' IDENTIFIED BY '...';
GRANT REPLICATION CLIENT ON *.* TO 'datadog'@'localhost' WITH MAX_USER_CONNECTIONS 5;
GRANT PROCESS ON *.* TO 'datadog'@'localhost';
FLUSH PRIVILEGES;
---------------


==== Setup mariadb cluster in mode master-slave (optionnel, abandonned)

On the server, activate the mode MASTER by adding the directives:

[source,bash]
---------------
server-id              = 1
log_bin                = /var/log/mysql/mysql-bin.log
expire_logs_days        = 10
max_binlog_size         = 100M
binlog_format           = MIXED
#binlog_do_db           = include_database_name
#binlog_ignore_db       = include_database_name
---------------

On slave, activate the setup for the SLAVE by adding the directives:

[source,bash]
---------------
server-id              = 100
replicate_ignore_db=mysql
replicate_ignore_db=information_schema
replicate_ignore_db=performance_schema
replicate_ignore_db=dolibarr
replicate_ignore_db=test
#replicate_do_db       = onlythedatabasestoreplicate
---------------

On master, create the replication account:

[source,sql]
---------------
GRANT SUPER, RELOAD, REPLICATION SLAVE ON *.* TO 'repluser'@'%' IDENTIFIED BY 'replpass';
SHOW GRANTS FOR 'repluser'
---------------

Relancer les serveurs.

Vérifier que le SLAVE peut atteindre le master sur un host fixe et via le port 3306.

On master:

[source,sql]
---------------
FLUSH TABLES WITH READ LOCK;
SHOW MASTER STATUS;
---------------

-> Récuperer les identifiants


Dumper les bases de données et le mettre sur le Slave.


On slave:

[source,sql]
---------------
START SLAVE;
CHANGE MASTER TO MASTER_HOST='myservername.mycomapny.com', MASTER_USER='repluser', MASTER_PASSWORD='xxxxxxxxx', MASTER_LOG_FILE='mysqld-bin.000004', MASTER_LOG_POS=643;
---------------


Pour voir si un slave est en attente de replication du master, pour voir si le *Slave_IO_State* est à *Waiting for master to send event* et si
*Slave_IO_Running* et *Slave_SQL_Running* sont à YES et voir la dernière erreur:

[source,sql]
---------------
SHOW SLAVE STATUS;
---------------

Remarque: Le *Exec_Master_Log_Pos* Doit aussi valoir la même valeur que le SHOW MASTER STATUS sur le serveur.
Pour forcer un slave a relancer les requêtes master en suspens suite à un arrêt après erreur:

[source,sql]
---------------
STOP SLAVE;
--SET GLOBAL SQL_SLAVE_SKIP_COUNTER = 1;		-- Nb de requete en erreur à ignorer
START SLAVE;
---------------


En cas de probleme pour relance mysql slave, mettre
innodb_force_recovery = 1 dans */etc/mysql/mariadb.conf.d/50-server.cnf*
Mais à enlever pour avoir les tables en écritures à nouveau après avoir résolue le problème.


(Voir https://www.howtoforge.com/tutorial/replicating-a-master-database-using-mariadb-10/)



=== Setup of AppArmor

Copy */bin/bash* or */bin/dash* into */bin/secureBash*

Add apparmor file *bin.secureBash* in */etc/apparmor.d* with this content:

[source,bash]
---------------
# Last Modified: Thu Nov 10 11:20:06 2016
#include <tunables/global>

/bin/secureBash {
  #include <abstractions/base>
  #include <abstractions/nameservice>

  deny capability setgid,
  deny capability setuid,
  deny capability sys_resource,


  deny /etc/apt/sources.list r,
  deny /etc/apt/sources.list.d/ r,
  deny /etc/default/nss r,
  deny /etc/host.conf r,
  deny /etc/hosts r,
  deny /etc/securetty r,
  deny /etc/shadow r,
  deny /etc/sudoers r,
  deny /etc/sudoers.d/ r,
  deny /etc/sudoers.d/README r,
  deny /home/ r,
  deny /home/jail/ r,
  deny /lib/x86_64-linux-gnu/security/pam_deny.so m,
  deny /lib/x86_64-linux-gnu/security/pam_env.so m,
  deny /lib/x86_64-linux-gnu/security/pam_permit.so m,
  deny /lib/x86_64-linux-gnu/security/pam_umask.so m,
  deny /lib/x86_64-linux-gnu/security/pam_unix.so m,
  deny /proc/filesystems r,
  deny /proc/sys/kernel/ngroups_max r,
  deny /usr/bin/sudo rx,
  deny /usr/lib/sudo/sudoers.so m,
  deny /var/lib/sudo/sree1/ w,
  deny owner /var/www/ r,
  deny owner /var/www/** r,

  owner /home/*/home/*/** rix,
  /etc/crontab r,
  /var/spool/cron/crontabs/** r,

  /bin/ r,
  /bin/cat rix,
  /bin/chmod rix,
  /bin/cp rix,
  /bin/customerCocoonBash mr,
  /bin/dash rix,
  /bin/grep rix,
  /bin/gzip rix,
  /bin/less rix,
  /bin/lesspipe rix,
  /bin/ls rix,
  /bin/more rix,
  /bin/mkdir rix,
  /bin/mv rix,
  /bin/rm rix,
  /bin/rmdir rix,
  /bin/sed rix,
  /bin/tar rix,
  /bin/uname rix,
  /dev/tty rw,
  /etc/.pwd.lock wk,
  /etc/bash.bashrc r,
  /etc/bash_completion r,
  /etc/bash_completion.d/ r,
  /etc/bash_completion.d/** r,
  /etc/init.d/ r,
  /etc/inputrc r,
  /etc/mailname r,
  /etc/mysql/conf.d/ r,
  /etc/mysql/conf.d/mysqld_safe_syslog.cnf r,
  /etc/mysql/my.cnf r,
  /etc/pam.d/* r,
  /etc/papersize r,
  /etc/php/7.0/cli/* r,
  /etc/php/7.0/cli/conf.d/ r,
  /etc/php/7.0/cli/conf.d/* r,
  /etc/php/7.0/fpm/conf.d/ r,
  /etc/php/7.0/fpm/conf.d/* r,
  /etc/php/7.0/mods-available/ r,
  /etc/php/7.0/mods-available/* r,
  /etc/php/7.2/cli/* r,
  /etc/php/7.2/cli/conf.d/ r,
  /etc/php/7.2/cli/conf.d/* r,
  /etc/php/7.2/fpm/conf.d/ r,
  /etc/php/7.2/fpm/conf.d/* r,
  /etc/php/7.2/mods-available/ r,
  /etc/php/7.2/mods-available/* r,
  /etc/postfix/dynamicmaps.cf r,
  /etc/postfix/main.cf r,
  /etc/profile r,
  /etc/profile.d/ r,
  /etc/profile.d/*.sh r,
  /etc/python2.7/sitecustomize.py r,
  /etc/resolv.conf r,
  /etc/ssl/openssl.cnf r,
  /etc/vim/vimrc r,
  /etc/wgetrc r,
  /etc/ImageMagick-6/ r,
  /etc/ImageMagick-6/* r,
  /opt/groovy-1.8.6/bin/ r,
  /proc/*/auxv r,
  /run/mysqld/mysqld.sock rw,
  /sbin/ r,
  /tmp/ rix,
  /tmp/** rw,
  /sys/devices/system/cpu/ r,
  /usr/bin/ r,
  /usr/bin/awk rix,
  /usr/bin/basename rix,
  /usr/bin/clear rix,
  /usr/bin/clear_console rix,
  /usr/bin/crontab rix,
  /usr/bin/cut rix,
  /usr/bin/dircolors rix,
  /usr/bin/dirname rix,
  /usr/bin/du rix,
  /usr/bin/env rix,
  /usr/bin/expr rix,
  /usr/bin/find rix,
  /usr/bin/git rix,
  /usr/bin/groups rix,
  /usr/bin/head rix,
  /usr/bin/id rix,
  /usr/bin/locale-check rix,
  /usr/bin/mawk rix,
  /usr/bin/mysql rix,
  /usr/bin/mysqldump rix,
  /usr/bin/passwd rix,
  /usr/bin/php rix,
  /usr/bin/php7.0 rix,
  /usr/bin/php7.2 rix,
  /usr/bin/python rix,
  /usr/bin/python2.7 rix,
  /usr/bin/rsync rix,
  /usr/bin/scp rix,
  /usr/bin/tail rix,
  /usr/bin/unzip rix,
  /usr/bin/vim.basic rix,
  /usr/bin/vim.nox rix,
  /usr/share/bash-completion/** rix,
  /usr/share/vim/vim74/** rix,
  /usr/bin/wget rix,
  /usr/games/ r,
  /usr/include/python2.7/pyconfig.h r,
  /usr/lib/git-core/** rix,
  /usr/lib/openssh/sftp-server rix,
  /usr/lib{,32,64}/** mr,
  /usr/local/bin/ r,
  /usr/local/lib/python2.7/dist-packages/ r,
  /usr/local/sbin/ r,
  /usr/sbin/ r,
  /usr/sbin/postdrop rix,
  /usr/sbin/sendmail rix,
  /usr/share/command-not-found/priority.txt r,
  /usr/share/command-not-found/programs.d/ r,
  /usr/share/command-not-found/programs.d/all-main.db rk,
  /usr/share/command-not-found/programs.d/all-multiverse.db rk,
  /usr/share/command-not-found/programs.d/all-universe.db rk,
  /usr/share/command-not-found/programs.d/amd64-main.db rk,
  /usr/share/command-not-found/programs.d/amd64-multiverse.db rk,
  /usr/share/command-not-found/programs.d/amd64-restricted.db rk,
  /usr/share/command-not-found/programs.d/amd64-universe.db rk,
  /usr/share/mysql/charsets/Index.xml r,
  /usr/share/pyshared/CommandNotFound/CommandNotFound.py r,
  /usr/share/pyshared/CommandNotFound/__init__.py r,
  /usr/share/pyshared/CommandNotFound/util.py r,
  /usr/share/pyshared/apport_python_hook.py r,
  /usr/share/pyshared/apt/__init__.py r,
  /usr/share/pyshared/apt/cache.py r,
  /usr/share/pyshared/apt/cdrom.py r,
  /usr/share/pyshared/apt/deprecation.py r,
  /usr/share/pyshared/apt/package.py r,
  /usr/share/pyshared/apt/progress/__init__.py r,
  /usr/share/pyshared/apt/progress/base.py r,
  /usr/share/pyshared/apt/progress/old.py r,
  /usr/share/pyshared/apt/progress/text.py r,
  /usr/share/pyshared/aptsources/__init__.py r,
  /usr/share/pyshared/aptsources/distinfo.py r,
  /usr/share/pyshared/aptsources/sourceslist.py r,
  /usr/share/pyshared/lazr.restfulclient-0.12.0-nspkg.pth r,
  /usr/share/pyshared/lazr.uri-1.0.3-nspkg.pth r,
  /usr/share/pyshared/zope.interface-3.6.1-nspkg.pth r,
  /usr/share/vim/vim72/debian.vim r,
  /usr/share/vim/vim72/filetype.vim r,
  /usr/share/vim/vim72/lang/en_GB/LC_MESSAGES/vim.mo r,
  /usr/share/vim/vim72/plugin/ r,
  /usr/share/vim/vim72/plugin/getscriptPlugin.vim r,
  /usr/share/vim/vim72/plugin/gzip.vim r,
  /usr/share/vim/vim72/plugin/matchparen.vim r,
  /usr/share/vim/vim72/plugin/netrwPlugin.vim r,
  /usr/share/vim/vim72/plugin/rrhelper.vim r,
  /usr/share/vim/vim72/plugin/spellfile.vim r,
  /usr/share/vim/vim72/plugin/tarPlugin.vim r,
  /usr/share/vim/vim72/plugin/tohtml.vim r,
  /usr/share/vim/vim72/plugin/vimballPlugin.vim r,
  /usr/share/vim/vim72/plugin/zipPlugin.vim r,
  /usr/share/vim/vim72/scripts.vim r,
  /usr/share/vim/vim72/syntax/syncolor.vim r,
  /usr/share/vim/vim72/syntax/synload.vim r,
  /usr/share/vim/vim72/syntax/syntax.vim r,
  /usr/share/vim/vim73/debian.vim r,
  /usr/share/vim/vim73/filetype.vim r,
  /usr/share/vim/vim73/plugin/ r,
  /usr/share/vim/vim73/plugin/getscriptPlugin.vim r,
  /usr/share/vim/vim73/plugin/gzip.vim r,
  /usr/share/vim/vim73/plugin/matchparen.vim r,
  /usr/share/vim/vim73/plugin/netrwPlugin.vim r,
  /usr/share/vim/vim73/plugin/rrhelper.vim r,
  /usr/share/vim/vim73/plugin/spellfile.vim r,
  /usr/share/vim/vim73/plugin/tarPlugin.vim r,
  /usr/share/vim/vim73/plugin/tohtml.vim r,
  /usr/share/vim/vim73/plugin/vimballPlugin.vim r,
  /usr/share/vim/vim73/plugin/zipPlugin.vim r,
  /usr/share/vim/vim73/syntax/css.vim r,
  /usr/share/vim/vim73/syntax/html.vim r,
  /usr/share/vim/vim73/syntax/javascript.vim r,
  /usr/share/vim/vim73/syntax/php.vim r,
  /usr/share/vim/vim73/syntax/sql.vim r,
  /usr/share/vim/vim73/syntax/sqloracle.vim r,
  /usr/share/vim/vim73/syntax/syncolor.vim r,
  /usr/share/vim/vim73/syntax/synload.vim r,
  /usr/share/vim/vim73/syntax/syntax.vim r,
  /usr/share/vim/vim73/syntax/vb.vim r,
  /usr/share/vim/vim80/debian.vim r,
  /usr/share/vim/vim80/defaults.vim r,
  /usr/share/vim/vim80/filetype.vim r,
  /usr/share/vim/vim80/ftplugin.vim r,
  /usr/share/vim/vim80/indent.vim r,
  /usr/share/vim/vim80/pack/ r,
  /usr/share/vim/vim80/plugin/ r,
  /usr/share/vim/vim80/plugin/getscriptPlugin.vim r,
  /usr/share/vim/vim80/plugin/gzip.vim r,
  /usr/share/vim/vim80/plugin/logiPat.vim r,
  /usr/share/vim/vim80/plugin/matchparen.vim r,
  /usr/share/vim/vim80/plugin/netrwPlugin.vim r,
  /usr/share/vim/vim80/plugin/manpager.vim r,
  /usr/share/vim/vim80/plugin/rrhelper.vim r,
  /usr/share/vim/vim80/plugin/spellfile.vim r,
  /usr/share/vim/vim80/plugin/tarPlugin.vim r,
  /usr/share/vim/vim80/plugin/tohtml.vim r,
  /usr/share/vim/vim80/plugin/vimballPlugin.vim r,
  /usr/share/vim/vim80/plugin/zipPlugin.vim r,
  /usr/share/vim/vim80/rgb.txt r,
  /usr/share/vim/vim80/scripts.vim r,
  /usr/share/vim/vim80/syntax/css.vim r,
  /usr/share/vim/vim80/syntax/html.vim r,
  /usr/share/vim/vim80/syntax/javascript.vim r,
  /usr/share/vim/vim80/syntax/php.vim r,
  /usr/share/vim/vim80/syntax/sql.vim r,
  /usr/share/vim/vim80/syntax/sqloracle.vim r,
  /usr/share/vim/vim80/syntax/syncolor.vim r,
  /usr/share/vim/vim80/syntax/synload.vim r,
  /usr/share/vim/vim80/syntax/syntax.vim r,
  /usr/share/vim/vim80/syntax/nosyntax.vim r,
  /usr/share/vim/vim80/syntax/vb.vim r,
  /usr/share/ImageMagick-6/ r,
  /usr/share/ImageMagick-6/* r,
  owner /var/spool/postfix/maildrop/ rw,
  owner /var/spool/postfix/maildrop/** rw,
  /var/spool/postfix/public/pickup w,
  owner @{HOME}/ rwl,
  owner @{HOME}/** rwl,
  owner /mnt/diskhome/home/** rixwlk,
  /mnt/diskhome/home/osu*/dbn*/*_error.log r,
  /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmail.php rix,
  /home/admin/wwwroot/dolibarr_sellyoursaas/scripts/phpsendmailprepend.php rix,
}
---------------



* Activate the rule apparmor in mode *enforce* (or *complain*)

[source,bash]
---------------
aa-status
aa-enforce bin.secureBash
aa-status
/etc/init.d/apparmor status
---------------


* To reload an apparmor profile of rules:

[source,bash]
---------------
aa-enforce usr.sbin.mysqld
---------------


* to disable a profile of rules

[source,bash]
---------------
apparmor_parser -v -R /etc/apparmor.d/usr.sbin.mysqld
---------------

To avois to have apparmor relaunched after a manual stop, modify */lib/systemd/system/apparmor.service* to set *RemainAfterExit=no*

[source,bash]
---------------
RemainAfterExit=no
---------------

Then
---------------
systemctl daemon-reload
---------------


=== Allow generation of PNG thumbs from PDFs

Supprimer la règle de désactivation du format Ghostscript PDF dans ImageMagick

    vi /etc/ImageMagick-6/policy.xml

Mettre en commentaire

    <!--  <policy domain="coder" rights="none" pattern="PDF" /> -->


=== Configuration du serveur DNS sur les serveurs Master

Chez le registrar, mettre à jour le DNS du nom de domaine principal *mysaasdomainname.com* pour ajouter un enregistrement *A* pour 

    *admin.mysaasdomainname.com*         Domain de l'outil d'administration pointant sur l'ip du serveur Master
    *myaccount.mysaasdomainname.com*     Domain de l'outil d'administration pointant sur l'ip du serveur Master


=== Setup of DNS server on deployment servers

Chez le registrar, mettre à jour le DNS du nom de domaine principal *mysaasdomainname.com* pour ajouter un enregistrement *A* pour 

    *withX.mysaasdomainname.com*          Sous domaine des instances utilisateurs pointant sur l'ip du serveur de Déploiement
    *ns1with1.mysaasdomainname.com*       Serveur DNS 1 des instances utilisateurs pointant sur l'ip du serveur de Déploiement
    *ns2with1.mysaasdomainname.com*       Serveur DNS 2 des instances utilisateurs pointant sur l'ip du serveur de Déploiement

You can also add record *GLUE record* on your register side for (optional)

    *ns1with1.mysaasdomainname.com*
    *ns2with1.mysaasdomainname.com*

Create a file */etc/bind/withX.mysaasdomainname.com.hosts* for the DNS *withX.mysaasdomainname.com* on the *Deployment server* (replace X):

[source,bash]
---------------
$ttl 1d
$ORIGIN with1.mysaasdomainname.com.
@               IN     SOA     ns1withXmysaasdomainname.com. admin.mysaasdomainname.com. ((
                140921009        ; serial
                600              ; refresh = 10 minutes
                300              ; update retry = 5 minutes
                604800           ; expiry = 1 week
                660              ; negative ttl
                )
                NS              ns1withX.mysaasdomainname.com.
                NS              ns2withX.mysaasdomainname.com.
                IN      TXT     "v=spf1 mx ~all"

@               IN      A       1.2.3.4		; set here the ip of deployment server that hosts the deployed applications

$ORIGIN withX.mysaasdomainname.com.

; other sub-domain records
; other sub-domain records
; here will be added entry like this one
; client1  A   ip.of.server.deployment

---------------


Ajouter une entrée dans */etc/bind/named.conf.local* pour que ce nouveau fichier soit pris en compte

[source,bash]
---------------
// mysaasdomainname.com
zone "with.mysaasdomainname.com" {
        type master;
        file "/etc/bind/with.mysaasdomainname.com.hosts";
        };
---------------


Créer un répertoire */etc/bind/archives*

[source,bash]
---------------
mkdir /etc/bind/archives
---------------


Vérifier que le fichier */etc/resolv.conf* utilise bien 127.0.0.1 comme resolver. Si non désactiver *systemd-resolver* (voir point suivant) et créer un fichier */etc/resolv.conf* manuellement.

Désactiver *systemd-resolver* qui ajoute 127.0.0.53 comme resolver et rend bind inopérent en local.

[source,bash]
---------------
sudo systemctl disable systemd-resolved.service
sudo systemctl stop systemd-resolved
cat "nameserver 127.0.0.1" > /etc/resolv.conf
shutdown -Fr now
---------------


=== Setup of PHP

==== Securisation du répertoire des sessions PHP

Mettre les droits en *drwx-wx-wt* sur le répertoire des sessions php */dev/shm/* et/ou */var/lib/php*


==== Définition taille upload et durée sessions

Modifier le fichier *php.ini* (celui de *apache* et celui de *cli*) pour permettre l'upload de plus gros fichiers.

[source,bash]
---------------
upload_max_filesize = 20M

post_max_size = 25M

session.gc_maxlifetime = 3600
---------------


==== Ajout du wrapper PHP pour la fonction PHP mail

Le wrapper PHP d'envoi de mail permet d'intercepter tout mail envoyé avec PHP (afin de faire une analyse antiSpam et d'intégrer une log qui pourra être exploiter par fail2ban) avant d'envoyer le mail réellement.

Create the links to the 2 tools for preprocessing PHP

[source,bash]
---------------
ln -fs /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmailprepend.php /usr/local/bin/
ln -fs /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/phpsendmail.php /usr/local/bin/
---------------

Modify the file *php.ini* (the one for *apache* and the one for *cli*) with:

[source,bash]
---------------
; Automatically add files before PHP document.
; http://php.net/auto-prepend-file
auto_prepend_file = /usr/local/bin/phpsendmailprepend.php

; For Unix only.  You may supply arguments as well (default: "sendmail -t -i").
; http://php.net/sendmail-path
sendmail_path = /usr/local/bin/phpsendmail.php

; The path to a log file that will log all mail() calls. Log entries include
; the full path of the script, line number, To address and headers.
mail.log = /var/log/phpmail.log
---------------


=== Configuration de logrotate

* Ajouter une ligne si non déjà présente dans le fichier */etc/logrotate.conf*

[source,bash]
---------------
# use the syslog group by default, since this is the owning group of /var/log/syslog.
su root syslog
---------------


* Créer un fichier */etc/logrotate.d/logrotate_admin_log*

[source,conf]
---------------
/home/*/logs/*log {
        su root root
        notifempty
        daily
        rotate 7
        compress
        sharedscripts
        postrotate
                if [ -f "`. /etc/apache2/envvars ; echo ${APACHE_PID_FILE:-/var/run/apache2.pid}`" ]; then
                        /etc/init.d/apache2 reload > /dev/null
                fi
        endscript
}
---------------


* Créer un fichier */etc/logrotate.d/logrotate_sellyoursaas_log*

[source,conf]
---------------
/var/log/phpsendmail.log /var/log/phpmail.log {
        su syslog adm        
        weekly
        rotate 4
        compress
        delaycompress
        missingok
        notifempty
        create 666 syslog adm
}

/var/log/remote_server.log /var/log/backup_backups.log {
        su root root
        weekly
        rotate 4
        compress
        delaycompress
        missingok
        notifempty
        create 600 root root
}

/home/admin/wwwroot/dolibarr_documents/*.log {
        su root root
        daily
        rotate 7
        compress
        delaycompress
        missingok
        notifempty
        create 660 admin www-data
}
---------------

* Pour tester la rotation immédiatement:

[source,bash]
---------------
logrotate -f logrotate_admin_log
logrotate -f logrotate_sellyoursaas_log
---------------


=== Configuration de journalctl (sur Ubuntu 18.04+)

* Editer le fichier */etc/systemd/journald.conf* pour définir une taille max aux journaux systemd

[source,conf]
---------------
...
SystemMaxUse=100M
...
---------------


=== Désactivation ou activation de apport (optionnel, "on" recommandé)

Pour activer:

[source,bash]
---------------
sudo systemctl enable apport.service
sudo systemctl start apport.service
sudo systemctl status apport.service
---------------

Pour désactiver:

[source,bash]
---------------
sudo systemctl disable apport.service
sudo systemctl stop apport.service
sudo systemctl status apport.service
---------------

Note: Les rapports sont dans */var/crash*


=== Installer certbot (pour le SSL des sites hors instances utilisateurs)

[source,bash]
---------------
apt-get install software-properties-common python-software-properties
add-apt-repository ppa:certbot/certbot
apt-get update
apt-get install python-certbot-apache
---------------

[[creation_certificat_ssl]]
=== Create a wildcard SSL certificate for user instances

Dans les commandes exemples suivantes, on utilsera X qui vaut '', 2, 3, ... (numéro du pool d'instance = numéro du serveur de déploiement).

==== Obtain wildcard certificate files for *.withX.mysaasdomainname.com

===== From a SSL provider 

* Créer le fichier key *withX.mysaasdomainname.com.key* et csr *withX.mysaasdomainname.com.csr* ainsi:

Pour générer le fichier .key:   
    
[source,bash]
---------------
cd /etc/apache2
openssl genrsa 2048 > with.mysaasdomainname.com.key
chmod go-r with.mysaasdomainname.com.key
---------------

Pour générer le fichier .csr:

[source,bash]
---------------
openssl req -nodes -newkey rsa:2048 -sha256 -keyout with.mysaasdomainname.com.key -out with.mysaasdomainname.com.csr
---------------

Choisir:

	CN	*.withX.mysaasdomainname.com
	OU	IT
	O	The company name
	L	Paris
	S	IDF
	C	FR
	Email				Ne rien mettre !
	Challenge password		Ne rien mettre !

* Submit the *.csr* file to the SSL certificate provider.

===== From LetsEncrypt

* Run certbot-auto

[source,bash]
---------------
/root/certbot-auto certonly --manual --preferred-challenges=dns -d "*.destailleur.fr"
---------------

Follow instructions to add DNS entries and validate generation.

To read generated .pem files, run

[source,bash]
---------------
openssl x509 -in fullchain.pem -text
---------------


==== Install certificates files

* Get the SSL certificate files (file *.crt* of the certificate and the intermediate certificate) and install them into */etc/apache2*)

* Créer un lien symbolique vers ces certificats avec le nom generique *withX.sellyoursaas.com.crt* et *withX.sellyoursaas.com-intermediate.crt*:

---------------
cd /etc/apache2
ln -fs /pathtomycertificate/withX.mysaasdomainname.com.crt with.sellyoursaas.com.crt
ln -fs /pathtomycertificate/withX.mysaasdomainname.com-intermediate.crt with.sellyoursaas.com-intermediate.crt
---------------

* Edit the default apache file */etc/apache2/sites-available/000-default-ssl.conf* to replace the lines that declare SSL certificate with the new one:

---------------
SSLCertificateFile /etc/apache2/witX.sellyoursaas.com.crt
SSLCertificateKeyFile /etc/apache2/withX.sellyoursaas.com.key
SSLCertificateChainFile /etc/apache2/withX.sellyoursaas.com-intermediate.crt
SSLCACertificateFile /etc/apache2/withX.sellyoursaas.com-intermediate.crt
---------------

So if a user is using an old URL with a delete virtual host, he will reach the default page */var/www/html/index.html*. 

* Edit the page */var/www/html/index.html* with the content

---------------
<html>
<body>
<center>
<br>
<strong>Server (name_of_server_x)<br></strong>Sorry, there is currently no service available to this URL. May be this domain name was used in the past to host a customer instance that was definitely undeployed.<br>
You may try later or create a new instance from scratch from page <a href="https://www.mysaasdomainname.com">https://www.mysaasdomainname.com</a>.
<br>
</center>
</body>
</html>
---------------


[[installation_des_taches_cron]]
=== Installation of Cron tasks

==== On Master server

You must have inside the cron of user *root*

[source,bash]
---------------
# m h  dom mon dow   command
# cron master root
47 2 * * * /root/certbot-auto renew --no-self-upgrade > /var/log/letsencrypt/certbot-auto_renew.log 2>&1
10 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_mysql_system.sh confirm >/home/admin/logs/backup_mysql_system.log 2>&1
# cron master and deployment root
40 4 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1
30 3 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/perms.ksh >/home/admin/logs/perms.log
#40 4 4 * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------

You must have inside the cron of user *admin*:

[source,bash]
---------------
# m h  dom mon dow   command
# cron master admin
*/10 * * * * /home/admin/wwwroot/dolibarr/scripts/cron/cron_run_jobs.php `hostname`secondpartofsecuritykey firstadmin >> /home/admin/wwwroot/dolibarr_documents/cron_run_jobs.php.log
7 7 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sources.sh /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git >> /home/admin/logs/git_update_sources.log 2>&1
5 5 * * 0 /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php updatestatsonly >> /home/admin/logs/batch_customers-updatedatabase.log 2>&1
# cron master and deployment root
20 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php backup >> /home/admin/logs/batch_customers-backup.log 2>&1
---------------

==== On deployment servers

You must have inside the cron of user *root*

[source,bash]
---------------
# m h  dom mon dow   command
# cron master and deployment root
40 4 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1
30 3 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/perms.ksh >/home/admin/logs/perms.log
#40 4 4 * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------

You must have inside the cron of user *admin*:

[source,bash]
---------------
# m h  dom mon dow   command
# cron master and deployment admin
20 0 * * * /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php backup >> /home/admin/logs/batch_customers-backup.log 2>&1
---------------

==== Check that launching of cron is ok

Reprendre du fichier */etc/crontab*, les commandes pour tester le lancement de crontab journalière, hebdo et mensuelles et tester en lançant en manuel. Par exemple par:

[source,bash]
---------------
cd / && run-parts --report /etc/cron.daily
---------------


== Installation of Dolibarr

On all servers (Master and Deploiement):

* Under the *admin* account, retrieve the sources of *Dolibarr* (v13 or +) to be placed in */home/admin/wwwroot/dolibarr*

[source,bash]
---------------
cd /home/admin/wwwroot
git clone https://github.com/Dolibarr/dolibarr dolibarr
---------------

On *Master server*:

* Install Dolibarr so that it responds to an Apache virtual host, for example: https://admin.mysaasdomainname.com (therefore pointing to */home/admin/wwwroot/dolibarr/htdocs*).
Warning: Choose as the name of the document directory during the installation wizard */home/admin/wwwroot/dolibarr_documents* rather than
*/home/admin/wwwroot/dolibarr/documents*

* If you configure the sending of emails from the Dolibarr backoffice via an SMTP relay like Google or SendGrid, remember to update the IPs (v4 and v6) authorized by the relay on the console of the SMTP relay service.

* Activate the "Cron / Scheduled Jobs" module and set the cron security key to the same value as what was set in the parameter of the call to *cron_run_jobs.php*


=== Installation of Geoip2

* Installer la base de données de MaxMind. Activer et configurer le module GeoIP de Dolibarr pour utiliser cette base de donnée.


== Installation of plugin SellYourSaas

Sur tous les serveurs (Master et Déploiement):

* Sous le compte *admin*, installer les sources de *SellYourSaas* : Récupérer les sources du projet à placer dans */home/admin/wwwroot/dolibarr_sellyoursaas*

[source,bash]
---------------
cd /home/admin/wwwroot
git clone https://github.com/eldy/sellyoursaas dolibarr_sellyoursaas
---------------

* Créer un lien symbolique dans */home/admin/wwwroot/dolibarr/htdocs/custom* vers */home/admin/wwwroot/dolibarr_sellyoursaas*

[source,bash]
---------------
cd /home/admin/wwwroot/dolibarr/htdocs/custom
ln -fs /home/admin/wwwroot/dolibarr_sellyoursaas sellyoursaas
---------------

* Créer un lien symoblique dans *source* dans myaccounts.

[source,bash]
---------------
cd /home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/myaccount
ln -fs /home/admin/wwwroot/dolibarr/htdocs source
---------------


Se connecter à l'interface utilisateur du master Dolibarr (https://admin.mysaasdomainname.com):

* Activer le module SellYourSaas

* Créer un compte utilisateur générique Dolibarr pour les accès à l'espace client (Exemple: "Utilisateur client"). Lui donner les accès suivants:

** Module Agenda
*** Lires les actions
*** Créer modifier les actions
*** Lire les actions des autres
*** Créer des actions pour les autres.
** Module Banque
*** Consulter les comptes financiers
*** Créer/modifier montant/supprimer écritures bancaires
** Module Catégories
*** Consulter les catégories
** Contrats/Abonnements
*** Lire les contrats/abonnements
*** Créer modifier les contrats abonnements
*** Activer un service abonnement
*** Désactiver un service abonnement
** Module GED
*** Lire/ Récuperer les documents
*** Soumettre ou supprimer un document
** Module Factures et avoir
*** Consulter les factures
** Module Fournisseurs
*** Consulter les fournisseurs
** Module Prélèvement
*** Consulter les prélèvements
** Module Produit
*** Consulter les produits
** Module SellYourSaas
*** Read SellYourSaaS data
** Module Services
*** Consulter les services
** Module Tiers
*** Consulter les tiers liés à l'utilisateur
*** Consulter les contacts
** Module Utilisateurs et Groupes
*** Créer/modifier ses propres informations utilisateur

* Créer un fichier */etc/sellyoursaas.conf* sur le serveur (sur le serveur *Master* et les *Serveurs de Déploiement*)

[source,bash]
---------------
vi /etc/sellyoursaas.conf
chown root.admin /etc/sellyoursaas.conf
chmod g-wx /etc/sellyoursaas.conf
chmod o-rwx /etc/sellyoursaas.conf
---------------

With the following content:

[source,conf]
---------------
# domain du service
domain=mysaasdomainname.com
subdomain=withX.mysaasdomainname.com
# ips autorisés à commander le déploiement
allowed_hosts=127.0.0.1,ipduservermaster
# Set to 1 if this server is the master server
masterserver=1
# Set to 1 if this server host instances for the pool (deployment server)
instanceserver=1
# Set to 1 if this server hosts a dns for the pool (deployment server)
dnsserver=1
# Set to its own IP if it is a deployment server
ipserverdeployment=ipduserverdeployment
# Set this to directory where dolibarr repository is installed
dolibarrdir=/home/admin/wwwroot/dolibarr
# Set directory where instances are stored (default is /home/jail/home)
#targetdir=/home/jail/home
# Set location of the master database
databasehost=ipduserveurmaster ou localhost si serveur master
# Set port of the master database (default is 3306)
databaseport=3306
# Set database name of the master server
database=databaseduservermaster
# Set credential for the master and deployment database
databaseuser=sellyoursaas
databasepass=...
# Set this to 1 or 0 to archive or not the test instances during undeployment (if 0, test are destroyed with no archive step)
archivetestinstances=1
# Set directory where backup are stored
backupdir=/mnt/diskbackup/backup
# Set directory where archives of tests instances are stored
archivedirtest=/mnt/diskbackup/archives-test
# Set directory where archives of paid instances are stored
archivedirpaid=/mnt/diskbackup/archives-paid
# Set remote server launcher ip (default is 0.0.0.0)
remoteserverlistenip=0.0.0.0
# Set remote server launcher port (default is 8080)
remoteserverlistenport=8080
# Options for use a different path of dataroot in deployment server
#olddoldataroot=/home/admin/wwwroot/dolibarr_documents
#newdoldataroot=/new/path/of/documents
# Options to change the directory of vhostfile templates
#templatesdir=/path/of/vhostfile/templates
# Options to change the SSL certificates names in Apache virtualhost
#websslcertificatecrt=with.sellyoursaas.com.crt
#websslcertificatekey=with.sellyoursaas.com.key
#websslcertificateintermediate=with.sellyoursaas.com-intermediate.crt
---------------

Mettre *dnsserver* et *instanceserver* à 0 sur le Master, mettre *dnsserver* et *instanceserver* à 1 sur les serveurs de déploiement des instances.

Rebasculer sur l'instance Master Dolibarr (https://admin.mysaasdomainname.com) et aller sur la configuration du module SellYourSaas:

TODO Ajouter desc des variables de config du module...

* Créer un *Package* pour définir les applications à déployer (fichiers, config, dump de base...)

Voir le chapitre "Configuration des packages" plus loin.

* Créer un *Service* de type *Application* pour définir la politique de tarification d'un abonnement et le *Package* associé.

Voir le chapitre "Configuration des services" pour un description des champs.

* Créer éventuellement des *Services* de type *Metric*. 

Voir le chapitre "Configuration des services" pour un description des champs.

* Créer éventuellement des *Services* de type *Options*. 

Voir le chapitre "Configuration des services" pour un description des champs.


Remarque: Les services de types *Options* et *Metrics* doivent être attachés à un service de type *Application* depuis l'onglet Produit Virtuels. 

Remarque: Les URL pour réaliser les déploiements des packages de type *Applications* seront visibles dans le menu *SellYourSaas - URL de déploiement*


<<<<

== Installation d'outils externes

=== Installation de webmin (optionnel pour supervision)

* Installation et activation de webmin et ajout de la restriction *allow* avec les IPs dans */etc/webmin/miniserv.conf*

* Si la fonction sauvegarde de toutes les bases de Webmin est active, modifier les fichiers */usr/share/webmin/mysql/backup.pl*  et  */usr/share/webmin/mysql/backup_db.cgi*

[source,perl]
---------------
foreach $db (@dbs) {
---------------

in

[source,perl]
---------------
foreach $db (@dbs) {
    # @CHANGE LDR
    if ($db =~ /^dbn/) { next; }
---------------

=== Installation of DataDog (optionnel pour supervision)

* Create an account on DataDog.

* Install the agent on serveur with:

[source,bash]
---------------
DD_AGENT_MAJOR_VERSION=7 DD_API_KEY=YOURDATADOGAPIKEY bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
---------------

* Copy the datadog config file to supervize *mysql/mariadb*. The file will be edited to enter the password of the datadog account on database later... 

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/mysql.d/conf.yaml.example /etc/datadog-agent/conf.d/mysql.d/conf.yaml
---------------

* Copy the datadog config file to supervize *apache*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/apache.d/conf.yaml.example /etc/datadog-agent/conf.d/apache.d/conf.yaml
---------------


* Copy the datadog config file to supervize *postfix*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/postfix.d/conf.yaml.example /etc/datadog-agent/conf.d/postfix.d/conf.yaml
---------------

Editer le fichier pour ajouter "min_collection_interval: 300" sous "postfix_user: postfix" et sous "queues: - deffered"


* Copy the datadog config file to supervize *memcached*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/mcache.d/conf.yaml.example /etc/datadog-agent/conf.d/mcache.d/conf.yaml
---------------


* Copy the datadog config file to supervize *process*.

[source,bash]
---------------
cp /etc/datadog-agent/conf.d/process.d/conf.yaml.example /etc/datadog-agent/conf.d/process.d/conf.yaml
---------------

Editer le pour suivre les 3 process suivants:

[source,bash]
---------------
instances:
  - name: process_apache2
    search_string: ['apache2']
    exact_match: False
    thresholds:
      critical: [5, 5000]

  - name: agent_sellyoursaas
    search_string: ['remote_server']
    exact_match: False
    thresholds:
      critical: [1, 5000]

  - name: apache_watchdog_daemon1
    search_string: ['apache_watchdog_daemon1']
    exact_match: False
    thresholds:
      critical: [1, 5000]
      
  - name: apache_watchdog_daemon2
    search_string: ['apache_watchdog_daemon2']
    exact_match: False
    thresholds:
      critical: [1, 5000]
---------------


Relancer datadog

[source,bash]
---------------
sudo service datadog-agent stop
sudo service datadog-agent start
---------------


<<<<

== Exploitation - Supervision

=== Backup / Restauration

==== Backup system

La sauvegarde du serveur+bases peut se faire par un snapshot d'image de la VM.
Il est aussi possible de ne faire un snapshot que des disques complémentaires.

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>

==== Restauration system

Depuis l'espace "Snapshots" d'OVH, on peut demander à le restaurer sur un serveur (pour une image VM) ou sur un aute disque (pour une image disque complémentaire), à condition que la cible (serveur ou disque) soit supérieure ou égale en terme de capacité de stockage.

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>


==== Backup files and database

===== Local backup

- Une sauvegarde locale de la configuration du serveur et des instances payantes est assurée par le cron

*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_mysql_system.sh confirm* de *root* (voir <<installation_des_taches_cron>>) vers le disque */home/admin/backup/conf* et */home/admin/backup/mysql*

- Une sauvegarde locale des instances utilisateurs payantes est assurée par le cron 

*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php backup* de *admin* (voir <<installation_des_taches_cron>>) vers le disque */mnt/diskbackup/backup/osu*


===== Remote backup

- Une sauvegarde externe doit être assurée vers un autre serveur par le cron de l'utilisateur *root* en lançant le fichier */home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/backup_backups.sh confirm >/home/admin/logs/backup_backups.log 2>&1* pour copier de */mnt/diskbackup/backup* vers */mnt/diskbackup/backup_serversource* (d'un autre serveur sur un autre datacenter). Ce script est intégré dans la crontab de root (Voir <<installation_des_taches_cron>>).


- For a remote backup as AWS:

[source,bash]
---------------
pip install awscli --upgrade --user

    TODO...
---------------


=== Mise à jour des images à déployer

- Un script cron permet de réaliser le git pull nécessaire pour mettre à jour les images des packages à déployer en lançant le script sur le serveur *Master*: 
*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/git_update_sources.sh /home/admin/wwwroot/dolibarr_documents/sellyoursaas/git*


=== Update Sell-Your-Saas statistics

- Un script cron permet de réaliser le calcul des statistiques en lançant le script sur le serveur *Master*: 
*/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/batch_customers.php updatestatsonly*


=== Increase size of disk

* Faire le snapshot du disque à redimensionner pour sauvegarde. Créer un nouveau disque depuis ce snapshot et le rattacher à un autre serveur (voir chapitre <<ajout_de_disque>>) pour s'assurer qu'il est lisible et ainsi avoir les fichiers de la sauvegarde sous la main.

* Unmount the filesystem:

[source,bash]
---------------
umount /mnt/disk/
---------------

Rem: Pour voir les fichiers ouverts sur un disque si le démontage échoue:

[source,bash]
---------------
lsof | grep "/mnt/disk"
---------------

* Détacher le disque du serveur. S'assurer que son nom ne contient pas d'espaces ou caractères spéciaux. Changer la taille du disque depuis le manager du Public Cloud et le réattacher au serveur.

* Agrandir la partition en lançant: 

[source,bash]
---------------
fdisk -l
parted /dev/vdX    (X=a, b, !!! SANS le chiffre, on veut le disque complet)
print all
resizepart 
Y
999GB    (Ne pas saisir la valeur proposé par défaut mais la valeur max du disque qui a été affiché par le "print all")
q
---------------

* Remonter le disque pour prise en compte et augmenter le formatage du filesystem sans effacement.

[source,bash]
---------------
mount /mnt/disk/
resize2fs /dev/vdX9
---------------


[Clonage d une instance serveur pour production bis ou pour développement]
=== Clonage d une instance serveur pour production bis ou pour développement

Les étapes suivantes résumes les opérations à réaliser pour cloner un serveur de déploiement en un autre serveur de déploiement.

- Créer un snapshot du *Deployment server* à cloner.

- Créer un nouveau serveur OVH depuis le snapshot en spécifiant le nom du snapshot source et en copiant dans la zone *post installation script* le contenu du fichier */scripts/post_inst_script.sh*

- Une fois le serveur prêt: Se connecter pour désactiver les crons en doublons avec le serveur cloné (possibilité de désactiver le process cron complètement) par

[source,bash]
---------------
systemctl stop cron
systemctl disable cron
systemctl status cron
---------------

- Editer la cron de *root* et de *admin* 

- Editer le fichier */etc/fstab* pour supprimer montage du/des disques données.

- Créer un snapshot du Disque de donnée.

- Créer un nouveau disque dur de donnée OVH depuis le snapshot et l'associer au serveur. Après association, il doit être visible avec la commande:

	fdisk -l

- Si on est parti sur un disque vierge, formater le nouveau disque dur de donnée. Pour cela, voir la chapitre <<ajout_de_disque>>.
  Si il s'agit d'un dique déjà formatté, voir la chapitre <<ajout_de_disque>> pour ne réaliser que les opérations de montage et d'ajout en */etc/fstab*.

- Ajouter un fichier à la racine du disque pour identifier le volume (Par exemple: DATA_MYSERVERNAME, BACKUP_MYSERVERNAME, ...). 

---------------
touch /mnt/diskhome/DATA_MYDEPLOYMENTSERVERX
---------------

- Ajouter une autorisation d'accès NFS au nouveau serveur sur le *Master*

[source,bash]
---------------
vi /etc/exports
---------------

Pour ajouter une ligne du type:

	/home/admin/wwwroot/dolibarr_documents/sellyoursaas i.p.deployment.server(ro,no_root_squash,sync,no_subtree_check)

[source,bash]
---------------
exportfs -v -a			(to validate new entries to add)
exportfs
systemctl restart nfs-kernel-server
---------------

- Ajouter, dans le fichier */etc/fstab* du nouveau serveur de déploiement, l'entrée pour avoir le montage NFS au démarrage.

[source,bash]
---------------
ip.server.master:/home/admin/wwwroot/dolibarr_documents/sellyoursaas /home/admin/wwwroot/dolibarr_documents/sellyoursaas  nfs  defaults 0 0
---------------

- Allow access between the new server *Deployment server* and the *Master server* at firewall level.

For exemple, on the *Master server*:

[source,bash]
---------------
${IPTABLES} -t filter -A INPUT -p tcp -s ip.server.deploymeent --dport nfs -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A INPUT -p udp -s ip.server.deploymeent --dport nfs -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A OUTPUT -p tcp -d ip.server.deploymeent --sport nfs -m state --state ESTABLISHED,RELATED -j ACCEPT
${IPTABLES} -t filter -A OUTPUT -p udp -d ip.server.deploymeent --sport nfs -m state --state ESTABLISHED,RELATED -j ACCEPT
---------------

And on the *Deployment servers*

If we have a IP_SERVER and IP_SERVER2 get like this:

[source,bash]
---------------
IP_SERVER=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | head -n 1`
IP_SERVER_V6=`ifconfig | grep -i global | sed -En 's/127.0.0.1//;s/.*inet6 (addr:)?\s?([^\s]+)/\2/p' | cut -d' ' -f1 | cut -d'/' -f1 `
IP_SERVER2=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p' | sed '2 ! d'
---------------

You must add

[source,bash]
---------------
${IPTABLES} -t filter -A OUTPUT -s $IP_SERVER -d $IP_SELLYOURSAAS_ADMIN -j ACCEPT
${IPTABLES} -t filter -A INPUT -s $IP_SELLYOURSAAS_ADMIN -d $IP_SERVER -j ACCEPT
if [ "x$IP_SERVER2" != "x" ]
then
        ${IPTABLES} -t filter -A OUTPUT -s $IP_SERVER2 -d $IP_SELLYOURSAAS_ADMIN -j ACCEPT
        ${IPTABLES} -t filter -A INPUT -s $IP_SELLYOURSAAS_ADMIN -d $IP_SERVER2 -j ACCEPT
fi
---------------


- Modifier le fichiers de configuration de Postfix suivant  (possibilité de désactiver postfix complètement ou juste envoyer les emails vers un SMTP bidon pour du développement):
  
  */etc/postfix/main.cf*
  */etc/postfix/mydestination*
  */etc/postfix/generic*
  */etc/mailname*

- Ajouter les entrées du nouveau serveur *mynewserverX.mydomain.com* dans le DNS du domaine *mydomain.com* avec l'IP v4 (record A) et l'IP v6 (record AAA) attribué par OVH lors de la création du nouveau serveur.

- Aller dans l'interface de gestion des serveurs OVH, pour modifier leur nom court. Ceci modifiera le fichier */etc/hostname* automatiquement (sinon modifier manuellement. Mettre un nom court, par exemple *myserverX*).

- Aller dans l'interface de gestion des IP OVH, pour ajouter aussi 
 
  - le reverse sur l'IP du nouveau serveur: *myserverX.mydomain.com*
  - le reverse sur l'IP virtuel si vous en avez pris une sur: *with.mydomain.com*
   
- Se connecter et modifier le fichier */etc/hosts* avec le nom du nouveau serveur et nouvelle ip du serveur.

- Editer le fichier */var/www/html/index.html* si il existe pour positionner le nouveau nom de serveur.

- Vérifier les fichiers */etc/network/interfaces* et */etc/network/interfaces.d/* (pour remettre à la bonne valeur les ip publiques, virtuelles et internes vrack si le vrack OVH est utilisé)

- Si webmin a été installé, se connecter à webmin pour désactiver les actions de supervision en doublons avec celle du serveur cloné.

- Modifier les fichiers de serveurs virtuels Apache dans */etc/apache2/sites-enabled* pour mettre la nouvelle IP/nouveau nom.

- Déclarer l'IP pour l'envoi d'emails:
  - Si un serveur SMTP distant est utilisé, penser à autoriser l'IP du nouveau serveur à ce serveur.
  - Ajouter les IPs du nouveau serveur dans la ou les entrées SPF du DNS (SPF a besoin d'une entrée séparé pour chaque domain utilisé *@mydomain.com* et pour chaque sous-domaines *@myserverX.mydomain.com*).

- Créer un compte *sellyoursaas* avec les permissions d'accès depuis le serveur de déploiement sur la base de donnée du *Master*. Voir <<creer_un_compte_db_sellyoursaas>>.

- Modifier le fichier */etc/sellyoursaas.conf* avec la nouvelle IP et nom de sous-domaine du nouveau pool et information du compte d'accès base de donnée du master.

- Effacer les fichiers dans :

  */etc/apache2/sellyoursaas-online*
  */etc/apache2/sellyoursaas-offline*
  */etc/apache2/sellyoursaas-available*

- Et les fichiers ayant pour nom :
  
  */var/spool/mail/osu**
  */var/spool/cron/crontabs/osu**

- Effacer les lignes osu* des fichiers

  */etc/passwd*
  */etc/shadow*
  */etc/group*
  
- Effacer les répertoires */mnt/diskhome/home/osu...*
  
- Destroy the database

  - of *dolibarr* master if source was the *Master* server.
  - of user instances if source was a deployment server. This can be done by doing:
  
[source,bash]
---------------
mysql -uroot -e "show databases" | grep dbn | gawk '{print "drop database `" $1 "`;select sleep(0.1);"}' > /tmp/dbntodelete.sql
mysql -uroot < /tmp/dbntodelete.sql
---------------
  
- Renommer le fichier DNS */etc/bind/withX.mydomain.com.hosts* en */etc/bind/with(X+1).mydomain.com.hosts* et l'éditer pour prendre en compte le nouveau prefix.

- Modifier le fichier */etc/bind/named.conf.local* pour prendre en compte le nouveau nom.

- Ajouter l'entrée DNS A pour *ns1withX*, *ns2withX* au domain *mydomain.com* pointant sur l'IP du nouveau serveur de déploiement.

- Ajouter l'entrée DNS NS pour *withX* au domain *mydomain.com* pointant sur *ns1withX.mydomain.com*.

- Arrêter, relancer le firewall, fail2ban, bind9, apache, postfix, remote_server et le datadog-agent si utilisé.

- Vérifier que, depuis le serveur Master, l'url *http://ipnouveauserverdeployment:8080/index.php/test* répond par un "404 Not Found".

- Vérifier que les répertoires existent avec les bons droits ou les forcer: 

[source,bash]
---------------
mkdir /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid;
chown admin.root /mnt/diskbackup/backup /mnt/diskbackup/archives-test /mnt/diskbackup/archives-paid;
---------------

- Acquerir les certificats SSL du nouveau nom de domaine *withX.mydomain.com*, les déposer sur le serveur
et créer les liens symboliques (Voir <<creation_certificat_ssl>>).

- Si vous configurez l'envoi des emails depuis le backoffice Dolibarr via un relai SMTP comme Google et/ou SendGrid, pensez à mettre à jour les IP (v4 et v6) autorisées par le relay sur la console du relai. 

En complément, si d'autres applications étaient actives sur le serveur clonés:

* For Prestashop sites, if the new server has a new url:
** go into database to set correct url into table *ps_configuration* (var PS_SHOP_DOMAIN, PS_SHOP_DOMAIN_SSL, CANONICAL_URL) and *ps_shop_url*
** remove all cache files: cd cache; rm -fr **; cd themes/xxx/cache; rm -fr **;
** check also that templates does not contains hard coded redirect like "<a href="http{if Tools::usingSecureMode()}s{/if}://dev.dolistore.com" title="{$shop_name|escape:'html':'UTF-8'}">
** change payment modules from Live to Test if the copy is for development

* For Mediawiki sites, if VM has a new url, go into database to set correct url into file *LocalSettings.php*


=== Upgrade OS

Pour mettre à jour Ubuntu 16.04 vers 18.04 sur un serveur SellYourSaas:

[source,sql]
---------------
apt dist-upgrade

apt install php-mysql
a2enmode php7.2
apt remove php-fpm php7-fpm
---------------



=== Follow space used by database

La requête suivante permet d'avoir une vision de l'espace réél (sans le gachis) en base de données.

[source,sql]
---------------
SET GLOBAL innodb_stats_on_metadata=0;
SELECT table_schema "DB Name", ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB",
SUM(data_length) "Data", SUM(index_length) "Index"  FROM information_schema.tables 
WHERE table_schema LIKE 'dbna%'
GROUP BY table_schema;
---------------

And per table

[source,sql]
---------------
SET GLOBAL innodb_stats_on_metadata=0;
SELECT table_schema "DB Name", table_name, ROUND(SUM(data_length + index_length) / 1024 / 1024, 1) "DB Size in MB",
SUM(data_length) "Data", SUM(index_length) "Index"  FROM information_schema.tables 
WHERE table_schema LIKE 'dbna%'
GROUP BY table_schema, table_name;
---------------

or old request:

SELECT IFNULL(B.engine,'Total') "Storage Engine",
CONCAT(LPAD(REPLACE(FORMAT(B.DSize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Data Size", CONCAT(LPAD(REPLACE(
FORMAT(B.ISize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Index Size", CONCAT(LPAD(REPLACE(
FORMAT(B.TSize/POWER(1024,pw),3),',',''),17,' '),' ',
SUBSTR(' KMGTP',pw+1,1),'B') "Table Size"
FROM (SELECT engine,SUM(data_length) DSize,SUM(index_length) ISize,
SUM(data_length+index_length) TSize FROM information_schema.tables
WHERE table_schema NOT IN ('mysql','information_schema','performance_schema')
AND engine IS NOT NULL GROUP BY engine WITH ROLLUP) B,
(SELECT 3 pw) A ORDER BY TSize;


=== Read or find deadlocks on the database

[source,bash]
---------------
echo "show engine innodb status" | mysql  | sed 's/\\n/\n/g' > /tmp/innodbstatus
---------------

[source,sql]
---------------
kill query ...
kill ...
---------------



=== Follow files modified

Pour détecter la liste des fichiers modifiés depuis la dernière mise à jour afick:

[source,bash]
---------------
afick.pl -k
---------------

Voir le résumé des historiques de chaque changements:

[source,bash]
---------------
vi /var/lib/afick/history
---------------

Voir le détail des changements d'un jour:

[source,bash]
---------------
vi /var/lib/afick/archive/afick.YYYMMDD*
---------------

Voir la documentation *afick.pl* pour plus d'options.



=== Utilisation de OpenStack pour gérer les images de serveurs

- Installer les utilitaires OpenStack

[source,bash]
---------------
apt-get install python3-openstackclient python3-novaclient -y
---------------

- Récupérer le fichier OpenStack RC File v3

[source,bash]
---------------
source fichiersource.sh
---------------

- Les commandes openstack sont alors disponibles.

Pour récupérer une image d'instance:

[source,bash]
---------------
nova list
nova image-create aaa115b3-83df-4375-b2ee-19339041dcfa nom_du_snap_serveur1
glance image-list   ou   openstack image list
glance image-download --file mon_fichier_snap_serveur1.qcow2 aaab785d-8a34-40f5-bdcd-0a3c3c350c5a
---------------

Pour pousser une image d'instance sur un projet:

[source,bash]
---------------
source fichiertarget.sh
export OS_REGION_NAME=SBG1
glance image-create --name nom_image_snaphot_new_server --disk-format qcow2 --container-format bare --file mon_fichier_snap_serveur1.qcow2
---------------

Pour récupérer une image de volume, il faut la backup sous forme d'image d'instance:

[source,bash]
---------------
openstack volume list
...Then detach the volume from its server...
openstack image create --disk-format qcow2 --container-format bare --volume 673b0ad9-1fca-485c-ae2b-8ee271b71dc7 nom_image_snaphot_new_volume
openstack volume list
openstack image save --file nom_image_snaphot_new_volume.qcow2 8625f87e-8248-4e62-a0ce-a89c7bd1a9be
---------------

Pour pousser une image sur un projet:

[source,bash]
---------------

---------------

- Pour recréer un serveur depuis une image

Voir chapitre <<Clonage d une instance serveur pour production bis ou pour développement>>


=== Passage en mode rescue d'un serveur

Aller sur l'interface du service Cloud pour passer en mode rescue. Le serveur sera rebooté et un lien pour se logué sera fourni.

Trouver les disques attachées et montez le disque système.

[source,bash]
---------------
lsblk
mount /dev/sdXY /mnt
---------------

Il est alors possible d'agir sur le disque en écriture accessible dans /mnt


=== Move the database (var/lib/mysql into /mnt/diskhome/mysql/)

From the MySQL prompt, select the data directory:

mysql -uroot

select @@datadir;

+-----------------+
| @@datadir       |
+-----------------+
| /var/lib/mysql/ |
+-----------------+
1 row in set (0.00 sec)

This output confirms that MySQL is configured to use the default data directory, /var/lib/mysql/, so that’s the directory we need to move. Once you’ve confirmed this, type exit and press “ENTER” to leave the monitor:

exit
To ensure the integrity of the data, we’ll shut down MySQL before we actually make changes to the data directory:

sudo systemctl stop mysqld
systemctl doesn’t display the outcome of all service management commands, so if you want to be sure you’ve succeeded, use the following command:

sudo systemctl status mysqld
You can be sure it’s shut down if the final line of the output tells you the server is stopped:

Output
. . .
Jul 18 11:24:20 ubuntu-512mb-nyc1-01 systemd[1]: Stopped MySQL Community Server.
Now that the server is shut down, we’ll copy the existing database directory to the new location with rsync. Using the -a flag preserves the permissions and other directory properties, while-v provides verbose output so you can follow the progress.

Note: Be sure there is no trailing slash on the directory, which may be added if you use tab completion. When there’s a trailing slash, rsync will dump the contents of the directory into the mount point instead of transferring it into a containing mysql directory:

sudo rsync -av /var/lib/mysql /mnt/volume-nyc1-01
Once the rsync is complete, rename the current folder with a .bak extension and keep it until we’ve confirmed the move was successful. By re-naming it, we’ll avoid confusion that could arise from files in both the new and the old location:

sudo mv /var/lib/mysql /var/lib/mysql.bak
Now we’re ready to turn our attention to configuration.

Step 2 — Pointing to the New Data Location
MySQL has several ways to override configuration values. By default, the datadir is set to /var/lib/mysql in the /etc/my.cnf file. Edit this file to reflect the new data directory:

sudo vi /etc/my.cnf
Find the line in the [mysqld] block that begins with datadir=, which is separated from the block heading with several comments. Change the path which follows to reflect the new location. In addition, since the socket was previously man mlocated in the data directory, we’ll need to update it to the new location:

[source,bash]
---------------
/etc/my.cnf
[mysqld]
datadir=/mnt/volume-nyc1-01/mysql
socket=/mnt/volume-nyc1-01/mysql/mysql.sock
---------------

After updating the existing lines, we’ll need to add configuration for the mysql client. Insert the following settings at the bottom of the file so it won’t split up directives in the [mysqld] block:

[source,bash]
---------------
/etc/my.cnf
[client]
port=3306
socket=/mnt/volume-nyc1-01/mysql/mysql.sock
---------------
When you’re done, hit ESCAPE, then type :wq! to save and exit the file.

Step 3 — Restarting MySQL
Now that we’ve updated the configuration to use the new location, we’re ready to start MySQL and verify our work.

sudo systemctl start mysqld
sudo systemctl status mysqld
To make sure that the new data directory is indeed in use, start the MySQL monitor.

mysql -u root -p
Look at the value for the data directory again:

select @@datadir;
Output
+----------------------------+
| @@datadir                  |
+----------------------------+
| /mnt/volume-nyc1-01/mysql/ |
+----------------------------+
1 row in set (0.01 sec)
Now that you’ve restarted MySQL and confirmed that it’s using the new location, take the opportunity to ensure that your database is fully functional. Once you’ve verified the integrity of any existing data, you can remove the backup data directory with sudo rm -Rf /var/lib/mysql.bak.


!!!!! Sur Ubuntu 18.04
Ajouter */mnt/diskhome/mysql* dans les profiles apparmor qui contiennent */var/lib/mysql* (fichier */etc/apparmor.d/usr.sbin.mysqld*)

[source,bash]
---------------
# ADD For SellYourSaas. It allows also to move mysql dir into /mnt/diskhome if required. 
  /proc/*/status r,
  /sys/devices/system/node/ r,
  /sys/devices/system/node/node*/meminfo r,
  /sys/devices/system/node/*/* r,
  /sys/devices/system/node/* r,
  /mnt/diskhome/mysql/ r,
  /mnt/diskhome/mysql/** rwk,
---------------


Recharger le profile apparmor

[source,bash]
---------------
aa-enforce usr.sbin.mysqld
---------------



[[Lancement de mysql sans permissions]]
=== Lancement spéciaux de mysql ou mariadb

* Sans permissions :

[source,bash]
---------------
sudo mkdir -p /var/run/mysqld; 
sudo chown mysql /var/run/mysqld; 
sudo mysqld_safe --skip-grant-tables &
---------------

* Avec un mode different de recovery, modifier le fichier server.conf pour mettre 1, 2, 3, 4

[source,bash]
---------------
### RECOVERY
innodb_force_recovery=1
---------------

A partir de 3 ou +, risque de perte de données.


NOTE: Si le lancement est long, pour suivre l'état d'avancement, faire un lsof -p PID_de_mysql pour voir les fichiers et base traitées en relog. Ils sont ouverts par ordre de dates sur le disque.



=== Désactivation de toutes les instances utilisateurs

Utiliser le script *make_instance_offline* qui désactivera tous les accès en remplaçant chaque virtual host par un virtual host réalisant une redirection sur une page d'attente.

Le même script peut etre utilisé pour l'opération inverse.

[source,bash]
---------------
scripts/make_instance_offline.sh  https://myaccount.mydomain.com/offline.php  test|offline|online
---------------



=== Clean rubish files

Launch the script: 

[source,bash]
---------------
/home/admin/wwwroot/dolibarr/htdocs/custom/sellyoursaas/scripts/clean.sh confirm
---------------



<<<<

== How Sell-Your-Saas works

=== Setup of packages

Go into menu *SellYourSaas - Packages* to create your new package.

For example, to deploy an application like Dolibarr with sources available into directory *documents/sellyoursaas/git*, enter the values of the following fields:


Into field *Dir with sources 1*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/htdocs
---------------

Into field *Dir with sources 2*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/htdocs/install/doctemplates
---------------

Into field *Dir with sources 3*

[source,bash]
---------------
__DOL_DATA_ROOT__/sellyoursaas/git/dolibarr_10.0/scripts
---------------

Into field *Target relative dir for sources 1*

[source,bash]
---------------
__INSTANCEDIR__/htdocs
---------------

Into field *Target relative dir for sources 2*

[source,bash]
---------------
__INSTANCEDIR__/documents/doctemplates
---------------

Into field *Target relative dir for sources 3*

[source,bash]
---------------
__INSTANCEDIR__/scripts
---------------

Into field *Template of config file 1*:

[source,bash]
---------------
<?php
//
// File generated by SellYourSaas
//
// Take a look at conf.php.example file for an example of conf.php file
// and explanations for all possibles parameters.
//
$dolibarr_main_url_root='https://__APPDOMAIN__/';
$dolibarr_main_document_root='__INSTANCEDIR__/htdocs';
$dolibarr_main_url_root_alt='/custom';
$dolibarr_main_document_root_alt='__INSTANCEDIR__/htdocs/custom';
$dolibarr_main_data_root='__INSTANCEDIR__/documents';
$dolibarr_main_db_host='localhost';
$dolibarr_main_db_port='3306';
$dolibarr_main_db_name='__DBNAME__';
$dolibarr_main_db_user='__DBUSER__';
$dolibarr_main_db_pass='__DBPASSWORD__';
$dolibarr_main_db_type='mysqli';
$dolibarr_main_db_character_set='utf8';
$dolibarr_main_db_collation='utf8_unicode_ci';
$dolibarr_main_authentication='dolibarr';
//$dolibarr_main_authentication='dolibarr'; // Use forceuser for forced user
//$dolibarr_auto_user='xxx';

// Specific settings
$dolibarr_main_prod='1';
$dolibarr_nocsrfcheck='0';
$dolibarr_main_force_https='0';
$dolibarr_main_cookie_cryptkey='__APPUNIQUEKEY__';
$dolibarr_mailing_limit_sendbyweb='50';
$dolibarr_mailing_limit_sendbycli='400';

$dolibarr_memcached_view_disable=1;
?>
---------------


Into field *Target relative file for config file 1*

[source,bash]
---------------
__INSTANCEDIR__/htdocs/conf/conf.php
---------------


Into field *Dir with dump files*

[source,bash]
---------------
	__DOL_DATA_ROOT__/sellyoursaas/packages/__PACKAGEREF__
---------------

(Avec cette valeur, il sera alors possible de soumettre le fichier dump à charger vi l'onglet *Fichiers joints*


Into field *template fo cron file*

[source,bash]
---------------
# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.OGhHoO/crontab installed on Fri Oct 18 13:58:49 2019)
# (Cron version -- $Id: crontab.c,v 2.13 1994/01/17 03:20:37 vixie Exp $)
__INSTALLMINUTES__ __INSTALLHOURS__ * * * __INSTANCEDIR__/scripts/cron/cron_run_jobs.php __OSUSERNAME__ firstadmin > __INSTANCEDIR__/documents/cron.log 2>&1
---------------


Into field *shell after*

[source,bash]
---------------
touch __INSTANCEDIR__/documents/install.lock;
chown __OSUSERNAME__.__OSUSERNAME__ __INSTANCEDIR__/documents/install.lock
chmod -R a-w __INSTANCEDIR__/htdocs
chmod -R u+w __INSTANCEDIR__/htdocs/custom
---------------


Into field *sql after*

[source,bash]
---------------
UPDATE llx_user set pass_crypted = '__APPPASSWORD0SALTED__', email = '__APPEMAIL__' where login = 'admin' AND (pass = 'admin' OR pass_crypted = 'valeur_du_hash_dans_image');
REPLACE INTO llx_const (name, entity, value, type, visible) values('CRON_KEY', 0, '__OSUSERNAME__', 'chaine', 0);
REPLACE INTO llx_const (name, entity, value, type, visible) values('MAIN_INFO_SOCIETE_NOM', 1, '__APPORGNAME__', 'chaine', 0);
--REPLACE INTO llx_const (name, entity, value, type, visible) values('MAIN_INFO_SOCIETE_COUNTRY', 1, '__APPCOUNTRYIDCODELABEL__', 'chaine', 0);
UPDATE llx_const set value = '__APPEMAIL__' where name = 'MAIN_MAIL_EMAIL_FROM';
UPDATE llx_const set value = '__APPEMAIL__' where name = 'MAILING_EMAIL_FROM';
UPDATE llx_const set value = '9.0.5' where name = 'MAIN_VERSION_LAST_UPGRADE';
UPDATE llx_const set value = 'ip.server.deployment1, ip.servr.deployment2' where name = 'MAIN_EXTERNAL_SMTP_CLIENT_IP_ADDRESS';
REPLACE INTO llx_const (name, entity, value, type, visible) values('MAILING_NO_USING_PHPMAIL', 0, '1', 'chaine', 1);
---------------


=== Setup of Services

Les services représentent la politique de tarification.

Il faut créer un service de type *Application* qui sera lié au *Package* pour permettre le déploiement.

Le service de type *Application* peut ensuite avoir dans l'onglet *Produit virtuel*, d'autres services de type *Options* ou *Métrique*.


Exemple de service de type Application pour déployer l'application PHP Dolibarr ERP CRM:

image::Example_service_application.png[Exemple service application]

Exemple pour un service qui ajoute une métrique de tarification par Utilisateur:

image::Example_service_metric_USER.png[Exemple service metric]

Exemple pour un service qui ajoute une option pour plus de Go:

image::Example_service_option_GO.png[Exemple service option GO]


Remarque: Les services de types *Options* et *Metrics* doivent être attachés à un service de type *Application* depuis l'onglet Produit Virtuels. 



=== Get the URL for subscription

Aller dans le menu *SellYourSaas - Pages d'inscriptions* pour obtenir l'URL à utiliser pour souscrire à une instance (package de type Application et ses dépendances). 



=== Principe de déploiement d'une nouvelle instance SellYourSaas

- Le visiteur va sur la page d'inscription  https://myaccount.mydomain.com/register.php et saisit son email et choisit un nom d'URL pour son instance (l'URL peut accepter des paramètres pour spécifier le
services souscrit, ou encore le nom du revendeur).

- En cliquant sur La page d'inscription, les opérations suivantes sont réalisées :
  * Check thirdparty exists or not. If not create the third party, if yes, it says to create the new instance from the customer dashboard.
  * Create a contract (main subscription) into database with status "DEPLOY_IN_PROGRESS" and with a unix account name, pass, database account and pass, and other properties defined on contract. The subscribed service are lines of contracts.
  * Appelle listener de deploiement des instances (micro serveur web qui sert que la page *scripts/remote_server/index.php* et qui exécute l'action "deploy" (1 des 6 remotes actions: "deploy" "undeploy", "suspend", "unsuspend", "refresh", "recreateauthorizedkeys") sur le serveur de déploiement (par exemple pour Dolibarr, cela appelle les scripts *action_deploy_undeploy.sh* ou *action_suspend_unsuspend.sh* selon le code action) pour créer/détruire ou suspendre/réactiver l'instance du client. Voir le chapitre <<remote_actions>>.
  * Edit contract/subscription with status "DEPLOYED" if result of remote action is OK.
  * Send an email to user: Show result to user and send en email (if subscriptions is done from backoffice, this option is off).


[[remote_actions]]
=== Description of the 8 remote actions

A remote action is an action requested by the server to tha agent to be executed on the deployment server.

==== deploy / deployall

Steps realized by the agent and the remote action *deploy* or *deployall* are:

- Create unix user, pass and home with a restricted shell
- Add a dns entry
- Create a database
- Create database user with password and permissions to access the database.
- Create a virtual host apache
- Deploy files with cp -pr pathtogitofpackage/* /home/jail/home/usrABCDEFGHIK/appAZERTYUIOP
- Deploy documents with cp -pr pathtogitofpackagebis/* /home/jail/home/usrABCDEFGHIK/appAZERTYUIOP
- Copy/create/update configartion files and update them with all variables.
- Copy/create/update cron file and update them with all variables.

==== undeploy / undeployall

Steps realized by the agent and the remote action *undeploy* are:

- Toutes les actions inverses de le l'actions "deploy" (à l'exception de la première action pour le "undeploy": "undeploy" ne détruit pas l'utilisateur Unix, mais "undeployall" oui). 

==== suspend

Steps realized by the agent and the remote action *suspend* are:

- Désactivation du virtual host et reload apache.

Le but est de bloquer l'accès à l'instance avec un lien vers la dashboard pour mettre à jour son mode de paiement, sans toucher à l'instance.

==== unsuspend

Steps realized by the agent and the remote action *unsuspend* are:

- Réactivation du virtual host et reload apache.

==== rename

Steps realized by the agent and the remote action *rename* are:

- Renommer le nom de domaine et/ou le nom de domaine personnalisé (recrée les fichiers virtual hosts).

==== refresh

Steps realized by the agent and the remote action *refresh* are:

- Execution du calcul des métriques shell et renvoi des valeurs.

==== backup

Steps realized by the agent and the remote action *backup* are:

- Appel du script backup_instance pour exécuter le sauvegarde d'une instance

==== recreateauthorizedkeys

Cette remote action ne sert que pour le logiciel Dolibarr ERP CRM. Elle est inutile et inutilisé pour le déploiement d'autres logiciels.

Steps realized by the agent and the remote action *recreateauthorizedkeys* are:

- Mise à jour du fichier ssh authorized_keys avec les clés publiques passées en paramètres.


=== Some business rules of Sell-Your-Saas

- Le traitement qui valide les factures à l'état brouillon ne valide qu'une seule facture par client à la fois. Si il y en a 2 en attente, il faudra donc 2 lancements du batch de validation des factures pour les valider toutes les 2.

- Un traitement régulier renouvelle la période de fin de contrat 1 ou 2 jours avant l'expiration du service, mais uniquement si aucune facture impayée n'est ouverte pour le client.

- Si une instance a expirée depuis N jours (N paramétrable et différent si utilisateur avec mode de paiement saisie ou pas), le batch de suspension suspend l'instance.

- Si une instance est suspendue depuis M jours (M paramétrable et différent si client avec mode de paiement saisie ou pas), le batch de désinstallation désinstalle l'instance.

- Si un utilisateur met à jour son mode de paiement, on regarde les factures impayées et on essaie d'encaisser le solde. Si ok, le mode de paiement est validé, sinon refusé.

- Quand une facture est payée, si il n'y a plus de facture impayées et si l'instance du client avait été suspendu, elle est réactivée.

- Si un client a une facture impayée, la facture suivante reste à l'état brouillon.

- Quand une instance est détruite définitivement, les factures brouillons qui lui sont liées sont aussi détruites.  

- Les sauvegardes des bases et fichiers des instances ne se font que pour les clients SellYourSaas payants (ayant saisi au moins une fois un mode de paiement).



<<<

== Annexes

=== Quelques URL type pour les objectifs Google Analytics ou Statistiques DataDog

To activate Google Analytics statistics, put the tag in the configuration of the sellyoursaas module.

To activate DataDog statistics, fill in the constants:
 
  - SELLYOURSAAS_DATADOG_ENABLED à 1
  - SELLYOURSAAS_DATADOG_APIKEY avec la clé API de DataDog
  - SELLYOURSAAS_DATADOG_APPKEY avec la clé APP de DataDog

This is a detail of events or URL that can be tracked:

* Page affichée lorsqu'on affiche le formulaire d'inscription
- URL: /register.php   (peut servir d'objectif *Google Analytics "Prospect intéressé"*)                 
- Event DataDog: Aucun

* Page affichée suite à une inscription faite jusqu'au bout
- URL: /index.php?welcomid=   (peut servir d'objectif *Google Analytics "Prospect inscrit"*)
- Event DataDog: Aucun

* Page affichée lorsqu'un mode de paiement est ajouté pour la première fois avec succès = Nouveau client
- URL: /index.php?paymentrecorded=1   (peut servir d'objectif *Google Analytics "Client gagné"*)
- Event Datadog: *sellyoursaas.paymentmodeadded*

* Page affichée lorsqu'un mode de paiement est modifié avec succès
- URL: /index.php?paymentmodified=1
- Event Datadog: *sellyoursaas.paymentmodemodified*

* Paiement réalisé (avec la valeur 1)
- URL: Aucune
- Event DataDog: *sellyoursaas.paymentdone*

* Paiement réalisé (avec la valeur du montant du paiement)
- URL: Aucune
- Event DataDog: *sellyoursaas.payment*

* Client perdu, lorsqu'une instance payante est désinstallé (avec la valeur 1), que ce soit par le batch en automatique ou sur demande du client depuis l'espace client
- URL: Aucune
- Event DataDog: *sellyoursaas.payingcustomerlost*


Example of supervision of sellyoursaas using DataDog:

image::Example_screen_datadog.png[Example ecran supervision DataDog]


=== Hidden options

You can force different values for some setup parameters when the customer has registered itself from a page with *mydomain.com* as main domain.

* SELLYOURSAAS_NAME_FORDOMAIN-myseconddomain.com = My Service name bis 
* SELLYOURSAAS_ACCOUNT_URL-myseconddomain.com = https://myaccount.myseconddomain.com
* SELLYOURSAAS_ALLOW_RESELLER_PROGRAM-myseconddomain.com = 0
* SELLYOURSAAS_MAIN_EMAIL_FORDOMAIN-myseconddomain.com = contact@myseconddomain.com
* SELLYOURSAAS_MAIN_EMAIL_PREMIUM_FORDOMAIN-myseconddomain.com = contact+premium@myseconddomain.com
* SELLYOURSAAS_NOREPLY_EMAIL_FORDOMAIN-myseconddomain.cloud = noreply@myseconddomain.com
* SELLYOURSAAS_RESELLER_URL-myseconddomain.com = https://www.myseconddomain.com/resellers.php

To define account to use getipintel API for VPN probability.
* SELLYOURSAAS_GETIPINTEL_EMAIL = contact+checkcustomer@nltechno.com

To enable native Datadog reporting (datadog-agent must just be installed)
* SELLYOURSAAS_DATADOG_ENABLED = 1

If you use an external db server (same value of "databasehost" and "databaseport" in sellyoursaas.conf)
* SELLYOURSAAS_FORCE_DATABASE_HOST = ip or host name of your external mysql server
* SELLYOURSAAS_FORCE_DATABASE_PORT = port of your external mysql server

If you use an ssh port other than 22
* SELLYOURSAAS_SSH_SERVER_PORT = port of your ssh server

If the path of "documents" directory (DOL_DATA_ROOT) is different in deployment server (same value of "newdoldataroot" in sellyoursaas.conf)
* SELLYOURSAAS_FORCE_DOL_DATA_ROOT = /path/of/dolibarr/documents/in/deployment/server


=== TroubleShooting


==== ERROR "IMAP toolkit crash: unselectable socket in ssl_getdata()"

On deployment server in */var/log/syslog* when using IMAP PHP function:

  ERROR "IMAP toolkit crash: unselectable socket in ssl_getdata()"

=> Check that you have less than 1024 instances on same deployment server.
=> Check that error log file for instances is shared (instead one log file is open per instance with same unix account leading to troubles).


==== Error when sending email in */var/log/mail.log*

Error when sending email in */var/log/mail.log*:

	Mar  2 22:41:59 novafirstcloud6 postfix/error[12146]: 7E69E17DC50: to=<admin@novafirstcloud5.localdomain>, orig_to=<admin>, relay=none, delay=164458, delays=164458/0.06/0/0, dsn=4.4.3, status=deferred (delivery temporarily suspended: Host or domain name not found. Name service error for name=smtp.seendgrid.net type=A: Host not found, try again)

=> Check you have a file */etc/resolv.conf* and that it point to 127.0.0.1 (if not, create it and restart postfix)


==== php sessions files in /var/lib/php/sessions are not purged

php session purge can be done by 
	/etc/cron.d/php
or if systemd is available by
	systemctl status phpsessionclean.timer

Check the correct one is enabled.


==== Error fail2ban does not work on postfix-sasl rule

We found into log file /var/log/fail2ban.log

	2020-09-19 00:57:16,902 fail2ban.actions        [1182]: ERROR   Failed to execute ban jail 'postfix-sasl' action 'iptables-multiport' info 'ActionInfo
	
Edit the file /etc/fail2ban/jail/conf to replace *imap3* (it does not exists) into *imap* for rule postfix-sasl
